{
  "address": "0xf25109714a577af22AbB999D377fBC10095877DC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_noticePeriod",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "Mammon__AmountIsBelowMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__CallerIsNotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__CallerIsNotOwnerOrManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__FinalizationNotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__ManagerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Mammon__NoticePeriodIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "noticeTimeoutAt",
          "type": "uint64"
        }
      ],
      "name": "Mammon__NoticeTimeoutNotElapsed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Mammon__RatioChangePerBlockIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Mammon__SameTokenAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "Mammon__ValidatorIsNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__VaultIsAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__VaultIsFinalizing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__VaultNotInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Mammon__WeightIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "Mammon__WeightIsBelowMin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "noticePeriod",
          "type": "uint32"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight1",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "noticeTimeoutAt",
          "type": "uint64"
        }
      ],
      "name": "FinalizationInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PokeWeights",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "publicSwap",
          "type": "bool"
        }
      ],
      "name": "SetPublicSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "name": "SetSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "UpdateWeightsGradually",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestedAmount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestedAmount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowance0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allowance1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalWeight0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalWeight1",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__bfactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getDenormalizedWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetWeight0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWeight1",
          "type": "uint256"
        }
      ],
      "name": "getWeightsChangeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gradualUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holdings0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holdings1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight1",
          "type": "uint256"
        }
      ],
      "name": "initialDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeFinalization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noticePeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noticeTimeoutAt",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pokeWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IBPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPublicSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetWeight0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWeight1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "updateWeightsGradually",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validator",
      "outputs": [
        {
          "internalType": "contract IWithdrawalValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x058914f9d3399f22e64ed01fda02cf59896fe093d8ee3f4a89b701ee79588541",
  "receipt": {
    "to": null,
    "from": "0xbA1A7CeD5c8d0B724782c4F6156DD79E8Cf91093",
    "contractAddress": "0xf25109714a577af22AbB999D377fBC10095877DC",
    "transactionIndex": 1,
    "gasUsed": "7141593",
    "logsBloom": "0x
    "blockHash": "0x9cbc5a27bf0035de22efef80c4676d48be8ee39853e52536285d28cf93fe7cff",
    "transactionHash": "0x058914f9d3399f22e64ed01fda02cf59896fe093d8ee3f4a89b701ee79588541",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 29351235,
        "transactionHash": "0x058914f9d3399f22e64ed01fda02cf59896fe093d8ee3f4a89b701ee79588541",
        "address": "0xf25109714a577af22AbB999D377fBC10095877DC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ba1a7ced5c8d0b724782c4f6156dd79e8cf91093"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x9cbc5a27bf0035de22efef80c4676d48be8ee39853e52536285d28cf93fe7cff"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 29351235,
        "transactionHash": "0x058914f9d3399f22e64ed01fda02cf59896fe093d8ee3f4a89b701ee79588541",
        "address": "0x8f7F78080219d4066A8036ccD30D588B416a40DB",
        "topics": [
          "0x8ccec77b0cb63ac2cafd0f5de8cdfadab91ce656d262240ba8a6343bccc5f945",
          "0x000000000000000000000000f25109714a577af22abb999d377fbc10095877dc",
          "0x000000000000000000000000ac37fd7062bc8f89f191de890d28e251ae1e4521"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x9cbc5a27bf0035de22efef80c4676d48be8ee39853e52536285d28cf93fe7cff"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 29351235,
        "transactionHash": "0x058914f9d3399f22e64ed01fda02cf59896fe093d8ee3f4a89b701ee79588541",
        "address": "0xac37Fd7062Bc8F89F191DE890d28E251Ae1E4521",
        "topics": [
          "0x92eefe9b00000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008f7f78080219d4066a8036ccd30d588b416a40db"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002492eefe9b000000000000000000000000f25109714a577af22abb999d377fbc10095877dc00000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x9cbc5a27bf0035de22efef80c4676d48be8ee39853e52536285d28cf93fe7cff"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 29351235,
        "transactionHash": "0x058914f9d3399f22e64ed01fda02cf59896fe093d8ee3f4a89b701ee79588541",
        "address": "0xf25109714a577af22AbB999D377fBC10095877DC",
        "topics": [
          "0x66e52b5262c76d8285eb91db4aa6252e63670cf8750a6ca2168ed116bff1689e",
          "0x0000000000000000000000008f7f78080219d4066a8036ccd30d588b416a40db",
          "0x000000000000000000000000da0bd429aac8a32c73e1b6462a5b65c8ad717d23",
          "0x000000000000000000000000b34de65cd4e270948570cb7c27a461ed98dbe8d1"
        ],
        "data": "0x000000000000000000000000ba1a7ced3090d6235d454bfe52e53b215ab2342100000000000000000000000097246142314dc1e20b03c3f9c12432d75425b95e000000000000000000000000000000000000000000000000000000000000001e",
        "logIndex": 4,
        "blockHash": "0x9cbc5a27bf0035de22efef80c4676d48be8ee39853e52536285d28cf93fe7cff"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 29351235,
        "transactionHash": "0x058914f9d3399f22e64ed01fda02cf59896fe093d8ee3f4a89b701ee79588541",
        "address": "0xf25109714a577af22AbB999D377fBC10095877DC",
        "topics": [
          "0x605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a4350",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ba1a7ced3090d6235d454bfe52e53b215ab23421"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x9cbc5a27bf0035de22efef80c4676d48be8ee39853e52536285d28cf93fe7cff"
      }
    ],
    "blockNumber": 29351235,
    "cumulativeGasUsed": "7188196",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xda0bD429AAC8A32C73E1B6462a5B65C8ad717D23",
    "0xb34dE65cd4e270948570Cb7C27a461ED98dBE8d1",
    "0xba1a7CEd3090D6235d454bfe52e53B215AB23421",
    "0x97246142314dc1e20b03c3f9c12432d75425b95e",
    "30"
  ],
  "solcInputHash": "1915515f39392bc81b0bc7a3950a07a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_noticePeriod\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Mammon__AmountIsBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__CallerIsNotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__CallerIsNotOwnerOrManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__FinalizationNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__ManagerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Mammon__NoticePeriodIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"noticeTimeoutAt\",\"type\":\"uint64\"}],\"name\":\"Mammon__NoticeTimeoutNotElapsed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Mammon__RatioChangePerBlockIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Mammon__SameTokenAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Mammon__ValidatorIsNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__VaultIsAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__VaultIsFinalizing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__VaultNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Mammon__WeightIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Mammon__WeightIsBelowMin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"noticePeriod\",\"type\":\"uint32\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight1\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"noticeTimeoutAt\",\"type\":\"uint64\"}],\"name\":\"FinalizationInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PokeWeights\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"publicSwap\",\"type\":\"bool\"}],\"name\":\"SetPublicSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"SetSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateWeightsGradually\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowance1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalWeight0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalWeight1\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__bfactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDenormalizedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetWeight0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight1\",\"type\":\"uint256\"}],\"name\":\"getWeightsChangeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gradualUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdings0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdings1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight1\",\"type\":\"uint256\"}],\"name\":\"initialDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeFinalization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticeTimeoutAt\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPublicSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetWeight0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"updateWeightsGradually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"contract IWithdrawalValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,uint256)\":{\"params\":{\"amount0\":\"Amount to deposit of first token.\",\"amount1\":\"Amount to deposit of second token.\"}},\"getDenormalizedWeight(address)\":{\"returns\":{\"_0\":\"Denormalized weight value from underlying Balancer pool.\"}},\"getSwapFee()\":{\"returns\":{\"_0\":\"Swap fee from underlying Balancer pool.\"}},\"getWeightsChangeRatio(uint256,uint256)\":{\"details\":\"Will only be called by updateWeightsGradually().\",\"params\":{\"targetWeight0\":\"Target weight of first token.\",\"targetWeight1\":\"Target weight of second token.\"},\"returns\":{\"_0\":\"Change ratio from current weights to target weights.\"}},\"holdings0()\":{\"returns\":{\"_0\":\"Token balance in underlying pool\"}},\"holdings1()\":{\"returns\":{\"_0\":\"Token balance in underlying pool\"}},\"initialDeposit(uint256,uint256,uint256,uint256)\":{\"details\":\"Initial deposit must be performed before      calling withdraw() or deposit() functions.\",\"params\":{\"amount0\":\"Deposited amount of first token.\",\"amount1\":\"Deposited amount of second token.\",\"weight0\":\"Initial weight of first token.\",\"weight1\":\"Initial weight of second token.\"}},\"isPublicSwap()\":{\"returns\":{\"_0\":\"If public swap is turned on, returns true, otherwise false.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPublicSwap(bool)\":{\"params\":{\"value\":\"New state of public swap.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateWeightsGradually(uint256,uint256,uint256,uint256)\":{\"params\":{\"endBlock\":\"Block number at which the weights should reach target.\",\"startBlock\":\"Block number at which weight movement starts.\",\"targetWeight0\":\"Target weight of first token.\",\"targetWeight1\":\"Target weight of second token.\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"amount0\":\"Requested amount of first token.\",\"amount1\":\"Requested amount of second token.\"}}},\"stateVariables\":{\"__bfactory\":{\"details\":\"Balancer addresses taken from https://docs.balancer.fi/v/v1/smart-contracts/addresses#kovan\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Mammon__SameTokenAddresses(address)\":[{\"notice\":\"ERRORS ///\"}]},\"events\":{\"Created(address,address,address,address,address,uint32)\":{\"notice\":\"Emitted when the vault is created.\"},\"Deposit(uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when tokens are deposited.\"},\"FinalizationInitialized(uint64)\":{\"notice\":\"Emitted when initializeFinalization is called.\"},\"Finalized(address,uint256,uint256)\":{\"notice\":\"Emitted when vault is finalized.\"},\"ManagerChanged(address,address)\":{\"notice\":\"Emitted when manager is changed.\"},\"PokeWeights()\":{\"notice\":\"Emitted when pokeWeights is called.\"},\"SetPublicSwap(bool)\":{\"notice\":\"Emitted when public swap is turned on/off.\"},\"SetSwapFee(uint256)\":{\"notice\":\"Emitted when swap fee is updated.\"},\"UpdateWeightsGradually(uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when updateWeightsGradually is called.\"},\"Withdraw(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when tokens are withdrawn.\"}},\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256)\":{\"notice\":\"Deposit tokens into vault.\"},\"finalize()\":{\"notice\":\"Destroy vault and returns all funds to treasury owner.\"},\"getDenormalizedWeight(address)\":{\"notice\":\"Get token weight.\"},\"getSwapFee()\":{\"notice\":\"Get swap fee.\"},\"getWeightsChangeRatio(uint256,uint256)\":{\"notice\":\"Calculate change ratio for weights upgrade.\"},\"holdings0()\":{\"notice\":\"Balance of the first token\"},\"holdings1()\":{\"notice\":\"Balance of the second token\"},\"initialDeposit(uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize Vault with first deposit.\"},\"initializeFinalization()\":{\"notice\":\"Initiate vault destruction and return all funds to treasury owner.\"},\"initialized()\":{\"notice\":\"Indicates that the Vault has been initialized\"},\"isPublicSwap()\":{\"notice\":\"Check if vault trading is enabled.\"},\"manager()\":{\"notice\":\"Submits new balance parameters for the vault\"},\"noticePeriod()\":{\"notice\":\"Notice period for vault termination (in seconds).\"},\"noticeTimeoutAt()\":{\"notice\":\"Timestamp when notice elapses or 0 if not yet set\"},\"pokeWeights()\":{\"notice\":\"Update weights if within update window.\"},\"pool()\":{\"notice\":\"Balancer pool. Controlled by the vault.\"},\"setManager(address)\":{\"notice\":\"Change manager.\"},\"setPublicSwap(bool)\":{\"notice\":\"Emitted when public swap is turned on/off.\"},\"setSwapFee(uint256)\":{\"notice\":\"Change swap fee.\"},\"sweep(address,uint256)\":{\"notice\":\"Withdraw any tokens accidentally sent to vault.\"},\"token0()\":{\"notice\":\"First token address in vault.\"},\"token1()\":{\"notice\":\"Second token address in vault.\"},\"updateWeightsGradually(uint256,uint256,uint256,uint256)\":{\"notice\":\"Initiate weight move to target in given update window.\"},\"validator()\":{\"notice\":\"Verifies withdraw limits.\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw tokens up to requested amounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MammonVaultV0Kovan.sol\":\"MammonVaultV0Kovan\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/MammonVaultV0.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\nimport \\\"./dependencies/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/IERC165.sol\\\";\\nimport \\\"./dependencies/openzeppelin/Ownable.sol\\\";\\nimport \\\"./dependencies/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"./dependencies/openzeppelin/Math.sol\\\";\\nimport \\\"./dependencies/openzeppelin/SafeCast.sol\\\";\\nimport \\\"./dependencies/openzeppelin/ERC165Checker.sol\\\";\\nimport \\\"./interfaces/IBFactory.sol\\\";\\nimport \\\"./interfaces/IBPool.sol\\\";\\nimport \\\"./interfaces/IMammonVaultV0.sol\\\";\\nimport \\\"./interfaces/IWithdrawalValidator.sol\\\";\\nimport \\\"./libraries/SmartPoolManager.sol\\\";\\n\\n/// @title Risk-managed treasury vault.\\n/// @notice Managed two-asset vault that supports withdrawals\\n///         in line with a pre-defined validator contract.\\n/// @dev Vault owner is the asset owner.\\ncontract MammonVaultV0 is IMammonVaultV0, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n\\n    /// STORAGE ///\\n\\n    uint256 private constant ONE = 10**18;\\n\\n    /// @notice Largest possible notice period for vault termination (2 months).\\n    uint32 private constant MAX_NOTICE_PERIOD = 60 days;\\n\\n    /// @dev Address to represent unset manager in events.\\n    address private constant UNSET_MANAGER_ADDRESS = address(0);\\n\\n    /// @notice Minimum duration (in blocks) for a weight update.\\n    uint256 private constant MIN_WEIGHT_CHANGE_BLOCK_PERIOD = 40;\\n\\n    /// @notice Largest possible weight change ratio per one block\\n    /// @dev It's the increment/decrement factor per one block\\n    ///      increment/decrement factor per n blocks: Fn = f * n\\n    ///      Spot price growth range for n blocks: [1 / Fn - 1, Fn - 1]\\n    ///      E.g. increment/decrement factor per 200 blocks is 2\\n    ///      Spot price growth range for 200 blocks is [-50%, 100%]\\n    uint256 private constant MAX_WEIGHT_CHANGE_RATIO_PER_BLOCK = 10**18;\\n\\n    /// @notice Balancer pool. Controlled by the vault.\\n    IBPool public immutable pool;\\n\\n    /// @notice First token address in vault.\\n    address public immutable token0;\\n\\n    /// @notice Second token address in vault.\\n    address public immutable token1;\\n\\n    /// @notice Notice period for vault termination (in seconds).\\n    uint32 public immutable noticePeriod;\\n\\n    /// @notice Verifies withdraw limits.\\n    IWithdrawalValidator public immutable validator;\\n\\n    /// STORAGE SLOT START ///\\n\\n    /// @notice Submits new balance parameters for the vault\\n    address public manager;\\n\\n    /// @notice Timestamp when notice elapses or 0 if not yet set\\n    uint64 public noticeTimeoutAt;\\n\\n    /// @notice Indicates that the Vault has been initialized\\n    bool public initialized;\\n\\n    // STORAGE SLOT END, 3 BYTES LEFT ///\\n\\n    SmartPoolManager.GradualUpdateParams public gradualUpdate;\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when the vault is created.\\n    /// @param factory Address of Balancer factory.\\n    /// @param token0 Address of first token.\\n    /// @param token1 Address of second token.\\n    /// @param manager Address of vault manager.\\n    /// @param validator Address of withdrawal validator contract\\n    /// @param noticePeriod Notice period in seconds.\\n    event Created(\\n        address indexed factory,\\n        address indexed token0,\\n        address indexed token1,\\n        address manager,\\n        address validator,\\n        uint32 noticePeriod\\n    );\\n\\n    /// @notice Emitted when tokens are deposited.\\n    /// @param amount0 Amount of first token.\\n    /// @param amount1 Amount of second token.\\n    /// @param weight0 Aeight of first token.\\n    /// @param weight1 Weight of second token.\\n    event Deposit(\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 weight0,\\n        uint256 weight1\\n    );\\n\\n    /// @notice Emitted when tokens are withdrawn.\\n    /// @param requestedAmount0 Requested amount of first token.\\n    /// @param requestedAmount1 Requested amount of second token.\\n    /// @param withdrawnAmount0 Withdrawn amount of first token.\\n    /// @param withdrawnAmount1 Withdrawn amount of second token.\\n    /// @param allowance0 Allowance of first token.\\n    /// @param allowance1 Allowance of second token.\\n    /// @param finalWeight0 Post-withdrawal weight of first token.\\n    /// @param finalWeight1 Post-withdrawal weight of second token.\\n    event Withdraw(\\n        uint256 requestedAmount0,\\n        uint256 requestedAmount1,\\n        uint256 withdrawnAmount0,\\n        uint256 withdrawnAmount1,\\n        uint256 allowance0,\\n        uint256 allowance1,\\n        uint256 finalWeight0,\\n        uint256 finalWeight1\\n    );\\n\\n    /// @notice Emitted when manager is changed.\\n    /// @param previousManager Address of previous manager.\\n    /// @param manager Address of a new manager.\\n    event ManagerChanged(\\n        address indexed previousManager,\\n        address indexed manager\\n    );\\n\\n    /// @notice Emitted when updateWeightsGradually is called.\\n    /// @param weight0 The target weight of the first token.\\n    /// @param weight1 The target weight of the second token.\\n    /// @param startBlock Start block number of updates.\\n    /// @param endBlock End block number of updates.\\n    event UpdateWeightsGradually(\\n        uint256 weight0,\\n        uint256 weight1,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    );\\n\\n    /// @notice Emitted when pokeWeights is called.\\n    event PokeWeights();\\n\\n    /// @notice Emitted when public swap is turned on/off.\\n    /// @param publicSwap New state of public swap.\\n    event SetPublicSwap(bool publicSwap);\\n\\n    /// @notice Emitted when swap fee is updated.\\n    /// @param swapFee New swap fee.\\n    event SetSwapFee(uint256 swapFee);\\n\\n    /// @notice Emitted when initializeFinalization is called.\\n    /// @param noticeTimeoutAt Timestamp for notice timeout.\\n    event FinalizationInitialized(uint64 noticeTimeoutAt);\\n\\n    /// @notice Emitted when vault is finalized.\\n    /// @param caller Address of finalizer.\\n    /// @param amount0 Returned amount of first token.\\n    /// @param amount1 Returned amount of second token.\\n    event Finalized(address indexed caller, uint256 amount0, uint256 amount1);\\n\\n    /// ERRORS ///\\n\\n    error Mammon__SameTokenAddresses(address token);\\n    error Mammon__ValidatorIsNotValid(address validator);\\n    error Mammon__NoticePeriodIsAboveMax(uint256 actual, uint256 max);\\n    error Mammon__CallerIsNotOwnerOrManager();\\n    error Mammon__NoticeTimeoutNotElapsed(uint64 noticeTimeoutAt);\\n    error Mammon__ManagerIsZeroAddress();\\n    error Mammon__CallerIsNotManager();\\n    error Mammon__RatioChangePerBlockIsAboveMax(uint256 actual, uint256 max);\\n    error Mammon__WeightIsAboveMax(uint256 actual, uint256 max);\\n    error Mammon__WeightIsBelowMin(uint256 actual, uint256 min);\\n    error Mammon__AmountIsBelowMin(uint256 actual, uint256 min);\\n    error Mammon__FinalizationNotInitialized();\\n    error Mammon__VaultNotInitialized();\\n    error Mammon__VaultIsAlreadyInitialized();\\n    error Mammon__VaultIsFinalizing();\\n\\n    /// MODIFIERS ///\\n\\n    /// @dev Throws if called by any account other than the manager.\\n    modifier onlyManager() {\\n        if (msg.sender != manager) {\\n            revert Mammon__CallerIsNotManager();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or manager.\\n    modifier onlyOwnerOrManager() {\\n        if (msg.sender != owner() && msg.sender != manager) {\\n            revert Mammon__CallerIsNotOwnerOrManager();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called before vault is initialized.\\n    modifier onlyInitialized() {\\n        if (!initialized) {\\n            revert Mammon__VaultNotInitialized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called before finalization is initialized.\\n    modifier nonFinalizing() {\\n        if (noticeTimeoutAt != 0) {\\n            revert Mammon__VaultIsFinalizing();\\n        }\\n        _;\\n    }\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Initialize the contract by deploying new Balancer pool using the provided factory.\\n    /// @dev First token and second token shouldn't be same. Validator should conform to interface.\\n    /// @param factory_ Balancer Pool Factory address.\\n    /// @param token0_ First token address.\\n    /// @param token1_ Second token address.\\n    /// @param manager_ Vault manager address.\\n    /// @param validator_ Withdrawal validator contract address.\\n    /// @param noticePeriod_ Notice period in seconds.\\n    constructor(\\n        address factory_,\\n        address token0_,\\n        address token1_,\\n        address manager_,\\n        address validator_,\\n        uint32 noticePeriod_\\n    ) {\\n        if (token0_ == token1_) {\\n            revert Mammon__SameTokenAddresses(token0_);\\n        }\\n        if (\\n            !ERC165Checker.supportsInterface(\\n                validator_,\\n                type(IWithdrawalValidator).interfaceId\\n            )\\n        ) {\\n            revert Mammon__ValidatorIsNotValid(validator_);\\n        }\\n        if (noticePeriod_ > MAX_NOTICE_PERIOD) {\\n            revert Mammon__NoticePeriodIsAboveMax(\\n                noticePeriod_,\\n                MAX_NOTICE_PERIOD\\n            );\\n        }\\n\\n        pool = IBPool(IBFactory(factory_).newBPool());\\n        token0 = token0_;\\n        token1 = token1_;\\n        manager = manager_;\\n        validator = IWithdrawalValidator(validator_);\\n        noticePeriod = noticePeriod_;\\n\\n        emit Created(\\n            factory_,\\n            token0_,\\n            token1_,\\n            manager_,\\n            validator_,\\n            noticePeriod_\\n        );\\n        emit ManagerChanged(UNSET_MANAGER_ADDRESS, manager_);\\n    }\\n\\n    /// PROTOCOL API ///\\n\\n    /// @inheritdoc IProtocolAPI\\n    function initialDeposit(\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 weight0,\\n        uint256 weight1\\n    ) external override onlyOwner {\\n        if (initialized) {\\n            revert Mammon__VaultIsAlreadyInitialized();\\n        }\\n        initialized = true;\\n\\n        uint256 poolMinWeight = pool.MIN_WEIGHT();\\n        if (weight0 < poolMinWeight) {\\n            revert Mammon__WeightIsBelowMin(weight0, poolMinWeight);\\n        }\\n        uint256 poolMaxWeight = pool.MAX_WEIGHT();\\n        if (weight0 > poolMaxWeight) {\\n            revert Mammon__WeightIsAboveMax(weight0, poolMaxWeight);\\n        }\\n        uint256 poolMinAmount = pool.MIN_BALANCE();\\n        if (amount0 < poolMinAmount) {\\n            revert Mammon__AmountIsBelowMin(amount0, poolMinAmount);\\n        }\\n\\n        if (weight1 < poolMinWeight) {\\n            revert Mammon__WeightIsBelowMin(weight1, poolMinWeight);\\n        }\\n        if (weight1 > poolMaxWeight) {\\n            revert Mammon__WeightIsAboveMax(weight1, poolMaxWeight);\\n        }\\n        if (amount1 < poolMinAmount) {\\n            revert Mammon__AmountIsBelowMin(amount1, poolMinAmount);\\n        }\\n\\n        bindToken(token0, amount0, weight0);\\n        bindToken(token1, amount1, weight1);\\n\\n        gradualUpdate.startWeights = [weight0, weight1];\\n\\n        emit Deposit(amount0, amount1, weight0, weight1);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function deposit(uint256 amount0, uint256 amount1)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        onlyInitialized\\n        nonFinalizing\\n    {\\n        if (amount0 > 0) {\\n            depositToken(token0, amount0, holdings0());\\n        }\\n        if (amount1 > 0) {\\n            depositToken(token1, amount1, holdings1());\\n        }\\n\\n        uint256 weight0 = getDenormalizedWeight(token0);\\n        uint256 weight1 = getDenormalizedWeight(token1);\\n\\n        emit Deposit(amount0, amount1, weight0, weight1);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function withdraw(uint256 amount0, uint256 amount1)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        onlyInitialized\\n        nonFinalizing\\n    {\\n        (uint256 allowance0, uint256 allowance1) = validator.allowance();\\n\\n        uint256 balance0 = holdings0();\\n        uint256 balance1 = holdings1();\\n\\n        uint256 exactAmount0 = amount0.min(balance0).min(allowance0);\\n        uint256 exactAmount1 = amount1.min(balance1).min(allowance1);\\n\\n        uint256 withdrawnAmount0;\\n        uint256 withdrawnAmount1;\\n\\n        if (exactAmount0 > 0) {\\n            withdrawnAmount0 = withdrawToken(token0, exactAmount0, balance0);\\n        }\\n        if (exactAmount1 > 0) {\\n            withdrawnAmount1 = withdrawToken(token1, exactAmount1, balance1);\\n        }\\n\\n        uint256 finalWeight0 = getDenormalizedWeight(token0);\\n        uint256 finalWeight1 = getDenormalizedWeight(token1);\\n\\n        emit Withdraw(\\n            amount0,\\n            amount1,\\n            withdrawnAmount0,\\n            withdrawnAmount1,\\n            allowance0,\\n            allowance1,\\n            finalWeight0,\\n            finalWeight1\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function initializeFinalization()\\n        external\\n        override\\n        onlyOwner\\n        onlyInitialized\\n        nonFinalizing\\n    {\\n        noticeTimeoutAt = block.timestamp.toUint64() + noticePeriod;\\n        emit FinalizationInitialized(noticeTimeoutAt);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function finalize() external override nonReentrant onlyOwnerOrManager {\\n        if (noticeTimeoutAt == 0) {\\n            revert Mammon__FinalizationNotInitialized();\\n        }\\n        if (noticeTimeoutAt > block.timestamp) {\\n            revert Mammon__NoticeTimeoutNotElapsed(noticeTimeoutAt);\\n        }\\n\\n        (uint256 amount0, uint256 amount1) = returnFunds();\\n        emit Finalized(msg.sender, amount0, amount1);\\n\\n        selfdestruct(payable(owner()));\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function setManager(address newManager) external override onlyOwner {\\n        if (newManager == address(0)) {\\n            revert Mammon__ManagerIsZeroAddress();\\n        }\\n        emit ManagerChanged(manager, newManager);\\n        manager = newManager;\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function sweep(address token, uint256 amount) external override onlyOwner {\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /// MANAGER API ///\\n\\n    /// @inheritdoc IManagerAPI\\n    function updateWeightsGradually(\\n        uint256 targetWeight0,\\n        uint256 targetWeight1,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    ) external override onlyManager onlyInitialized nonFinalizing {\\n        /// Library computes the startBlock,\\n        /// computes startWeights as the current\\n        /// denormalized weights of the core pool tokens.\\n\\n        uint256 period = endBlock - startBlock;\\n        uint256 change = getWeightsChangeRatio(targetWeight0, targetWeight1) /\\n            period;\\n\\n        if (change > MAX_WEIGHT_CHANGE_RATIO_PER_BLOCK) {\\n            revert Mammon__RatioChangePerBlockIsAboveMax(\\n                change,\\n                MAX_WEIGHT_CHANGE_RATIO_PER_BLOCK\\n            );\\n        }\\n\\n        uint256[] memory newWeights = new uint256[](2);\\n        newWeights[0] = targetWeight0;\\n        newWeights[1] = targetWeight1;\\n\\n        SmartPoolManager.updateWeightsGradually(\\n            pool,\\n            gradualUpdate,\\n            newWeights,\\n            startBlock,\\n            endBlock,\\n            MIN_WEIGHT_CHANGE_BLOCK_PERIOD\\n        );\\n\\n        emit UpdateWeightsGradually(\\n            targetWeight0,\\n            targetWeight1,\\n            startBlock,\\n            endBlock\\n        );\\n    }\\n\\n    /// @inheritdoc IManagerAPI\\n    function pokeWeights()\\n        external\\n        override\\n        onlyManager\\n        onlyInitialized\\n        nonFinalizing\\n    {\\n        // IMPORTANT: This function currently privileges manager\\n        // as an arbitrageur but will be unnecessary when we migrate\\n        // to Balancer V2.\\n        SmartPoolManager.pokeWeights(pool, gradualUpdate);\\n        emit PokeWeights();\\n    }\\n\\n    /// @inheritdoc IManagerAPI\\n    function setPublicSwap(bool value)\\n        external\\n        override\\n        onlyManager\\n        onlyInitialized\\n    {\\n        pool.setPublicSwap(value);\\n        emit SetPublicSwap(value);\\n    }\\n\\n    /// @inheritdoc IManagerAPI\\n    function setSwapFee(uint256 newSwapFee) external override onlyManager {\\n        pool.setSwapFee(newSwapFee);\\n        emit SetSwapFee(newSwapFee);\\n    }\\n\\n    /// BINARY VAULT INTERFACE ///\\n\\n    /// @inheritdoc IBinaryVault\\n    function holdings0() public view override returns (uint256) {\\n        return pool.getBalance(token0);\\n    }\\n\\n    /// @inheritdoc IBinaryVault\\n    function holdings1() public view override returns (uint256) {\\n        return pool.getBalance(token1);\\n    }\\n\\n    /// USER API ///\\n\\n    /// @inheritdoc IUserAPI\\n    function isPublicSwap() external view override returns (bool) {\\n        return pool.isPublicSwap();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getSwapFee() external view override returns (uint256) {\\n        return pool.getSwapFee();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getDenormalizedWeight(address token)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return pool.getDenormalizedWeight(token);\\n    }\\n\\n    /// @notice Calculate change ratio for weights upgrade.\\n    /// @dev Will only be called by updateWeightsGradually().\\n    /// @param targetWeight0 Target weight of first token.\\n    /// @param targetWeight1 Target weight of second token.\\n    /// @return Change ratio from current weights to target weights.\\n    function getWeightsChangeRatio(\\n        uint256 targetWeight0,\\n        uint256 targetWeight1\\n    ) public view returns (uint256) {\\n        uint256 weight0 = getDenormalizedWeight(token0);\\n        uint256 weight1 = getDenormalizedWeight(token1);\\n\\n        uint256 factor0 = weight0 * targetWeight1;\\n        uint256 factor1 = targetWeight0 * weight1;\\n\\n        return\\n            factor0 > factor1\\n                ? (ONE * factor0) / factor1\\n                : (ONE * factor1) / factor0;\\n    }\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Bind token to the pool.\\n    /// @dev Will only be called by initialDeposit().\\n    /// @param token Address of a token to bind.\\n    /// @param amount Amount of a token to bind.\\n    /// @param weight Weight of a token to bind.\\n    function bindToken(\\n        address token,\\n        uint256 amount,\\n        uint256 weight\\n    ) internal {\\n        /// Transfer token to this contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        /// Approve the balancer pool\\n        IERC20(token).safeApprove(address(pool), amount);\\n        /// Bind token\\n        pool.bind(token, amount, weight);\\n    }\\n\\n    /// @notice Deposit token to the pool.\\n    /// @dev Will only be called by deposit().\\n    /// @param token Address of the token to deposit.\\n    /// @param amount Amount to deposit.\\n    /// @param balance Current balance of the token in the pool.\\n    function depositToken(\\n        address token,\\n        uint256 amount,\\n        uint256 balance\\n    ) internal {\\n        uint256 tokenDenorm = getDenormalizedWeight(token);\\n        uint256 newBalance = balance + amount;\\n\\n        uint256 newDenorm = (tokenDenorm * newBalance) / balance;\\n\\n        IERC20 erc20 = IERC20(token);\\n\\n        erc20.safeTransferFrom(msg.sender, address(this), amount);\\n        erc20.safeApprove(address(pool), amount);\\n\\n        pool.rebind(token, newBalance, newDenorm);\\n    }\\n\\n    /// @notice Withdraw token from the pool.\\n    /// @dev Will only be called by withdraw().\\n    /// @param token Address of the token to withdraw.\\n    /// @param amount Amount to withdraw.\\n    /// @param balance The current balance of the token in the pool.\\n    function withdrawToken(\\n        address token,\\n        uint256 amount,\\n        uint256 balance\\n    ) internal returns (uint256 withdrawAmount) {\\n        uint256 tokenDenorm = getDenormalizedWeight(token);\\n\\n        uint256 newBalance = balance - amount;\\n        uint256 newDenorm = (tokenDenorm * newBalance) / balance;\\n\\n        pool.rebind(token, newBalance, newDenorm);\\n\\n        IERC20 erc20 = IERC20(token);\\n        withdrawAmount = erc20.balanceOf(address(this));\\n        erc20.safeTransfer(msg.sender, withdrawAmount);\\n    }\\n\\n    /// @notice Return all funds to owner.\\n    /// @dev Will only be called by finalize().\\n    /// @return amount0 Exact returned amount of first token.\\n    /// @return amount1 Exact returned amount of second token.\\n    function returnFunds()\\n        internal\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        amount0 = returnTokenFunds(token0);\\n        amount1 = returnTokenFunds(token1);\\n    }\\n\\n    /// @notice Return funds to owner.\\n    /// @dev Will only be called by returnFunds().\\n    /// @param token Address of the token to unbind.\\n    /// @return amount The exact returned amount of a token.\\n    function returnTokenFunds(address token)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        pool.unbind(token);\\n\\n        IERC20 erc20 = IERC20(token);\\n        amount = erc20.balanceOf(address(this));\\n        erc20.safeTransfer(owner(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x398eab2b2434d2bf269945fca468cc76f703cc348a10cb24342d8e9b1edb666c\",\"license\":\"UNLICENSED\"},\"contracts/MammonVaultV0Kovan.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\nimport \\\"./MammonVaultV0.sol\\\";\\n\\ncontract MammonVaultV0Kovan is MammonVaultV0 {\\n    /**\\n     * @dev Balancer addresses taken from https://docs.balancer.fi/v/v1/smart-contracts/addresses#kovan\\n     */\\n    address public constant __bfactory =\\n        address(0x8f7F78080219d4066A8036ccD30D588B416a40DB);\\n\\n    // solhint-disable no-empty-blocks\\n    constructor(\\n        address _token0,\\n        address _token1,\\n        address _manager,\\n        address _validator,\\n        uint32 _noticePeriod\\n    )\\n        MammonVaultV0(\\n            __bfactory,\\n            _token0,\\n            _token1,\\n            _manager,\\n            _validator,\\n            _noticePeriod\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0x6cb340cf882527a7b4ce4e32b16ac0a18280d4fac668f912ad96cd4aa2e1e5b8\",\"license\":\"UNLICENSED\"},\"contracts/dependencies/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0x58babacb64eab01969e87b3678d8f58165bc6a4d56d0eea570ba87c3b1b14583\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0x6e77518fa23344571e92f538413dd2f3e08bf80ed4b53f33983256a88d9044fb\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc9798f4a9c08aa45233d47fa103d1d6ba7c74edcf5a9900c209fe417aef11985\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x2c2bab9a5dc8a3f6cbf0a45e9413a9bde9b9af438722038ecf3b5450683eda7c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\",\"keccak256\":\"0x67299250ad33d9653ba6e0589b60a2bcca5bd9eafaf8958fd3de79116e6f6754\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5a84941e8ac9bf14e8645a519242a62af5da41357582141ca80f55fb04d49ea8\",\"license\":\"MIT\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\ninterface IBFactory {\\n    function newBPool() external returns (address);\\n}\\n\",\"keccak256\":\"0x0c0c9d7f8cffe0a92a744d43f47b6003c9935dffa2b72b9fbb3e0de252610a4b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\ninterface IBPool {\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) external;\\n\\n    function unbind(address token) external;\\n\\n    function gulp(address token) external;\\n\\n    function finalize() external;\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) external view returns (uint256 tokenAmountOut);\\n\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) external view returns (uint256 tokenAmountIn);\\n\\n    function setSwapFee(uint256 swapFee) external;\\n\\n    function setPublicSwap(bool publicSwap) external;\\n\\n    function isPublicSwap() external view returns (bool);\\n\\n    function getSwapFee() external view returns (uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function getSpotPrice(address tokenIn, address tokenOut)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBalance(address token) external view returns (uint256);\\n\\n    function getDenormalizedWeight(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MIN_WEIGHT() external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MAX_WEIGHT() external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MIN_BALANCE() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbfba0ea3f05951a912fe0e5c7b31c7c6c5553c7b4e5a796f6b44d4a11072666f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBinaryVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\n/// @title Two-asset vault interface.\\ninterface IBinaryVault {\\n    /// @notice Balance of the first token\\n    /// @return Token balance in underlying pool\\n    function holdings0() external view returns (uint256);\\n\\n    /// @notice Balance of the second token\\n    /// @return Token balance in underlying pool\\n    function holdings1() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x94849da526236f7e012e2bade6f65b643dcf28a7cb4801e8b3f6d43da79b682f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMammonVaultV0.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\nimport \\\"./IUserAPI.sol\\\";\\nimport \\\"./IManagerAPI.sol\\\";\\nimport \\\"./IProtocolAPI.sol\\\";\\nimport \\\"./IBinaryVault.sol\\\";\\n\\n/// @title Interface for v0 vault.\\n// solhint-disable-next-line no-empty-blocks\\ninterface IMammonVaultV0 is IUserAPI, IManagerAPI, IProtocolAPI, IBinaryVault {\\n\\n}\\n\",\"keccak256\":\"0x69a629787eba942650c2e9377e507ccc67988050fbc2a728fc14a3ed735a7f47\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IManagerAPI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\n/// @title Interface for vault manager.\\n/// @notice Supports parameter submission.\\ninterface IManagerAPI {\\n    /// @notice Emitted when public swap is turned on/off.\\n    /// @param value New state of public swap.\\n    function setPublicSwap(bool value) external;\\n\\n    /// @notice Initiate weight move to target in given update window.\\n    /// @param targetWeight0 Target weight of first token.\\n    /// @param targetWeight1 Target weight of second token.\\n    /// @param startBlock Block number at which weight movement starts.\\n    /// @param endBlock Block number at which the weights should reach target.\\n    function updateWeightsGradually(\\n        uint256 targetWeight0,\\n        uint256 targetWeight1,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    ) external;\\n\\n    /// @notice Update weights if within update window.\\n    function pokeWeights() external;\\n\\n    /// @notice Change swap fee.\\n    function setSwapFee(uint256 newSwapFee) external;\\n}\\n\",\"keccak256\":\"0x3030a5c05abb55a30dcb60ecc034e7f893c76aa6285c7e27bc6e606a432a89f5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IProtocolAPI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\n/// @title Interface for protocol that owns treasury.\\ninterface IProtocolAPI {\\n    /// @notice Initialize Vault with first deposit.\\n    /// @dev Initial deposit must be performed before\\n    ///      calling withdraw() or deposit() functions.\\n    /// @param amount0 Deposited amount of first token.\\n    /// @param amount1 Deposited amount of second token.\\n    /// @param weight0 Initial weight of first token.\\n    /// @param weight1 Initial weight of second token.\\n    function initialDeposit(\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 weight0,\\n        uint256 weight1\\n    ) external;\\n\\n    /// @notice Deposit tokens into vault.\\n    /// @param amount0 Amount to deposit of first token.\\n    /// @param amount1 Amount to deposit of second token.\\n    function deposit(uint256 amount0, uint256 amount1) external;\\n\\n    /// @notice Withdraw tokens up to requested amounts.\\n    /// @param amount0 Requested amount of first token.\\n    /// @param amount1 Requested amount of second token.\\n    function withdraw(uint256 amount0, uint256 amount1) external;\\n\\n    /// @notice Initiate vault destruction and return all funds to treasury owner.\\n    function initializeFinalization() external;\\n\\n    /// @notice Destroy vault and returns all funds to treasury owner.\\n    function finalize() external;\\n\\n    /// @notice Change manager.\\n    function setManager(address newManager) external;\\n\\n    /// @notice Withdraw any tokens accidentally sent to vault.\\n    function sweep(address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4182280e78ac6f35ce19a1893800cb1b64884c13144ccddcac41958c15976313\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUserAPI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\nimport \\\"./IProtocolAPI.sol\\\";\\nimport \\\"./IBinaryVault.sol\\\";\\n\\n/// @title Vault public interface.\\n/// @notice Interface for vault arbitrageurs and other observers.\\ninterface IUserAPI {\\n    /// @notice Check if vault trading is enabled.\\n    /// @return If public swap is turned on, returns true, otherwise false.\\n    function isPublicSwap() external view returns (bool);\\n\\n    /// @notice Get swap fee.\\n    /// @return Swap fee from underlying Balancer pool.\\n    function getSwapFee() external view returns (uint256);\\n\\n    /// @notice Get token weight.\\n    /// @return Denormalized weight value from underlying Balancer pool.\\n    function getDenormalizedWeight(address token)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x5c0d459cae20d48b501e77340b461e5fc5db3327eef22ee423bfb3d4ec587df3\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IWithdrawalValidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\n/// @title Withdrawal validation logic.\\n/// @notice Represents the withdrawal conditions for a vault.\\n/// @dev Should be extended by vault owner or manager, deployed and attached\\n///      to a vault instance. Withdrawal validator needs to respond to shortfall\\n///      shortfall conditions and provide an accurate allowance.\\ninterface IWithdrawalValidator {\\n    /// @notice Determine how much of each token could be withdrawn under\\n    ///         current conditions.\\n    /// @return token0Amount, token1Amount The quantity of each token that\\n    ///         can be withdrawn from the vault.\\n    /// @dev Token quantity value should be interpreted with the same\\n    ///      decimals as the token ERC20 balance.\\n    function allowance() external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2a7857354eb217bd733115a7e351b700728dd2204e12f35afc75cbe008767d7d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IBPool.sol\\\";\\n\\nlibrary SmartPoolManager {\\n    struct GradualUpdateParams {\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256[] startWeights;\\n        uint256[] endWeights;\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    function updateWeightsGradually(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate,\\n        uint256[] calldata newWeights,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        uint256 minimumWeightChangeBlockPeriod\\n    ) external {}\\n\\n    // solhint-disable no-empty-blocks\\n    function pokeWeights(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate\\n    ) external {}\\n}\\n\",\"keccak256\":\"0xb17978b0f355e66f0f49e85b230b997d5796394154c3476c2cb5644ddcbdcc6d\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620032093803806200320983398101604081905262000035916200046d565b738f7f78080219d4066a8036ccd30d588b416a40db85858585856200005a336200028e565b600180556001600160a01b0385811690851614156200009c57604051634c6d710560e01b81526001600160a01b03861660048201526024015b60405180910390fd5b620000ba826337890bfd60e21b620002de60201b62001ca01760201c565b620000e45760405163da5901bb60e01b81526001600160a01b038316600482015260240162000093565b624f1a0063ffffffff82161115620001215760405163ab850c4160e01b815263ffffffff82166004820152624f1a00602482015260440162000093565b856001600160a01b031663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200015d57600080fd5b505af115801562000172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019891906200044f565b606090811b6001600160601b031990811660805286821b811660a05285821b811660c052600280546001600160a01b0319166001600160a01b0387811691821790925585841b9092166101005260e084811b6001600160e01b031916905260408051928352858216602084015263ffffffff8516908301528087169281891692918a16917f66e52b5262c76d8285eb91db4aa6252e63670cf8750a6ca2168ed116bff1689e910160405180910390a46040516001600160a01b038416906000907f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a4350908290a3505050505050505050505062000552565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620002eb8362000308565b8015620002ff5750620002ff838362000340565b90505b92915050565b60006200031d826301ffc9a760e01b62000340565b801562000302575062000339826001600160e01b031962000340565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090620003a990869062000514565b6000604051808303818686fa925050503d8060008114620003e7576040519150601f19603f3d011682016040523d82523d6000602084013e620003ec565b606091505b509150915060208151101562000409576000935050505062000302565b81801562000428575080806020019051810190620004289190620004e9565b9695505050505050565b80516001600160a01b03811681146200044a57600080fd5b919050565b6000602082840312156200046257600080fd5b620002ff8262000432565b600080600080600060a086880312156200048657600080fd5b620004918662000432565b9450620004a16020870162000432565b9350620004b16040870162000432565b9250620004c16060870162000432565b9150608086015163ffffffff81168114620004db57600080fd5b809150509295509295909350565b600060208284031215620004fc57600080fd5b815180151581146200050d57600080fd5b9392505050565b6000825160005b818110156200053757602081860181015185830152016200051b565b8181111562000547576000828501525b509190910192915050565b60805160601c60a05160601c60c05160601c60e05160e01c6101005160601c612b67620006a2600039600081816102b90152610b040152600081816103ed015261079a01526000818161044f0152818161086301528181610c1a01528181610c7701528181611482015281816115e901528181611a5601528181611ab20152611eeb0152600081816101f901528181610be601528181610c4a01528181610fa101528181611457015281816115bc01528181611a1e01528181611a850152611ec00152600081816102610152818161062b0152818161088e0152818161095101528181610d8101528181610fcc015281816111a50152818161125501528181611315015281816115320152818161176a0152818161185f01528181611c1101528181611dc001528181612013015281816120650152818161211f0152818161217101526123290152612b676000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80635ef3970511610104578063ae2a65a1116100a2578063e211b87511610071578063e211b87514610479578063e2bbb15814610481578063f2fde38b14610494578063fde924f7146104a757600080fd5b8063ae2a65a114610424578063d0ebdbe714610437578063d21220a71461044a578063d4cadf681461047157600080fd5b80638597e879116100de5780638597e879146103b15780638da5cb5b146103c4578063948d8ce6146103d55780639b14d4c6146103e857600080fd5b80635ef397051461037b5780636ea056a914610396578063715018a6146103a957600080fd5b80633a5381b51161017c57806349b595521161014b57806349b59552146103355780634bb278f3146103485780635a8342d8146103505780635ae7ead81461037357600080fd5b80633a5381b5146102b4578063441a3e70146102db5780634771233b146102ee578063481c6a751461032257600080fd5b806316f0115b116101b857806316f0115b1461025c57806324d9ce4b14610283578063252b33131461028b57806334e19907146102a157600080fd5b8063026e9874146101df5780630dfe1681146101f4578063158ef93e14610238575b600080fd5b6101f26101ed366004612965565b6104af565b005b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b60025461024c90600160e01b900460ff1681565b604051901515815260200161022f565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f26106e2565b61029361084c565b60405190815260200161022f565b6101f26102af3660046128ed565b610910565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f26102e936600461291f565b6109f1565b60025461030990600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161022f565b60025461021b906001600160a01b031681565b6101f26103433660046128b3565b610d15565b6101f2610e18565b60035460045461035e919082565b6040805192835260208301919091520161022f565b610293610f8a565b61021b738f7f78080219d4066a8036ccd30d588b416a40db81565b6101f26103a4366004612889565b610ffd565b6101f261106f565b6101f26103bf366004612965565b6110d5565b6000546001600160a01b031661021b565b6102936103e336600461286e565b611510565b61040f7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161022f565b61029361043236600461291f565b6115b4565b6101f261044536600461286e565b61167c565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b610293611766565b6101f26117c1565b6101f261048f36600461291f565b611905565b6101f26104a236600461286e565b611b2b565b61024c611c0d565b6002546001600160a01b031633146104da57604051634dd4ed5360e01b815260040160405180910390fd5b600254600160e01b900460ff1661050457604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615610536576040516395ebdb5f60e01b815260040160405180910390fd5b60006105428383612add565b905060008161055187876115b4565b61055b9190612a9c565b9050670de0b6b3a764000081111561059c57604051631c6ea5b360e11b815260048101829052670de0b6b3a764000060248201526044015b60405180910390fd5b60408051600280825260608201835260009260208301908036833701905050905086816000815181106105d1576105d1612b36565b60200260200101818152505085816001815181106105f1576105f1612b36565b60209081029190910101526040516304ee2fc960e21b8152738DBB8C9bFEb7689f16772c85136993cDA0c05eA4906313b8bf249061065f907f00000000000000000000000000000000000000000000000000000000000000009060039086908b908b906028906004016129b3565b60006040518083038186803b15801561067757600080fd5b505af415801561068b573d6000803e3d6000fd5b5050604080518a8152602081018a9052908101889052606081018790527fb725031571441ba6c801832988142cbdb52dcb6b3a0b2ade758482d7dd2b49c3925060800190505b60405180910390a150505050505050565b6000546001600160a01b0316331461073c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600254600160e01b900460ff1661076657604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615610798576040516395ebdb5f60e01b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff166107c842611cc3565b6107d29190612a70565b600280547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff93841681029190911791829055604051910490911681527f33e822f2bda8444368b3567e3bdbb01de7d80f64a774c929d9f2e7e9b281adc39060200160405180910390a1565b60405163f8b2cb4f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f8b2cb4f906024015b60206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190612906565b905090565b6002546001600160a01b0316331461093b57604051634dd4ed5360e01b815260040160405180910390fd5b6040516334e1990760e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906334e1990790602401600060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050507fcda74150def0ede554aff5f677be9df0e226fddff9bd9ceddf732b9673b1c92d816040516109e691815260200190565b60405180910390a150565b60026001541415610a445760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610593565b60026001556000546001600160a01b03163314610aa35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600254600160e01b900460ff16610acd57604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615610aff576040516395ebdb5f60e01b815260040160405180910390fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de242ff46040518163ffffffff1660e01b8152600401604080518083038186803b158015610b5a57600080fd5b505afa158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190612941565b915091506000610ba0610f8a565b90506000610bac61084c565b90506000610bc485610bbe8986611d47565b90611d47565b90506000610bd685610bbe8986611d47565b90506000808315610c0f57610c0c7f00000000000000000000000000000000000000000000000000000000000000008588611d5d565b91505b8215610c4357610c407f00000000000000000000000000000000000000000000000000000000000000008487611d5d565b90505b6000610c6e7f0000000000000000000000000000000000000000000000000000000000000000611510565b90506000610c9b7f0000000000000000000000000000000000000000000000000000000000000000611510565b604080518e8152602081018e905290810186905260608101859052608081018c905260a081018b905260c0810184905260e081018290529091507f57bcc2baad14202eeb9d757f5fcd8a2b7b8c26a282d9458d460eb52ef532238f906101000160405180910390a150506001805550505050505050505050565b6002546001600160a01b03163314610d4057604051634dd4ed5360e01b815260040160405180910390fd5b600254600160e01b900460ff16610d6a57604051631888b48f60e31b815260040160405180910390fd5b6040516324dacaa960e11b815281151560048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906349b5955290602401600060405180830381600087803b158015610dcd57600080fd5b505af1158015610de1573d6000803e3d6000fd5b505050507f3c83e916edb4c7f342384067941b22663b5093a3cdcc03326de9b8208256b9b2816040516109e6911515815260200190565b60026001541415610e6b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610593565b60026001556000546001600160a01b03163314801590610e9657506002546001600160a01b03163314155b15610eb457604051637849279f60e01b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff16610ee557604051630ce728a360e21b815260040160405180910390fd5b60025442600160a01b90910467ffffffffffffffff161115610f305760025460405163074cec0760e01b8152600160a01b90910467ffffffffffffffff166004820152602401610593565b600080610f3b611eb8565b604080518381526020810183905292945090925033917f616c9469db50815ae0f1d0a020d9fc9060da7c57f03559afb0d4ebdaa0a3a05e910160405180910390a26000546001600160a01b0316ff5b60405163f8b2cb4f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f8b2cb4f906024016108bb565b6000546001600160a01b031633146110575760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b61106b6001600160a01b0383163383611f15565b5050565b6000546001600160a01b031633146110c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b6110d36000611f92565b565b6000546001600160a01b0316331461112f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600254600160e01b900460ff161561115a57604051631ec6430360e31b815260040160405180910390fd5b600280547fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b179055604080516310c5a9c160e11b815290516000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163218b538291600480820192602092909190829003018186803b1580156111ec57600080fd5b505afa158015611200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112249190612906565b905080831015611251576040516318dcdf6360e31b81526004810184905260248101829052604401610593565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4a28a526040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ac57600080fd5b505afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190612906565b9050808411156113115760405163034fe40760e61b81526004810185905260248101829052604401610593565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663867378c56040518163ffffffff1660e01b815260040160206040518083038186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a49190612906565b9050808710156113d1576040516313f4b45960e01b81526004810188905260248101829052604401610593565b828410156113fc576040516318dcdf6360e31b81526004810185905260248101849052604401610593565b818411156114275760405163034fe40760e61b81526004810185905260248101839052604401610593565b80861015611452576040516313f4b45960e01b81526004810187905260248101829052604401610593565b61147d7f00000000000000000000000000000000000000000000000000000000000000008887611fef565b6114a87f00000000000000000000000000000000000000000000000000000000000000008786611fef565b60408051808201909152858152602081018590526114ca9060059060026127fb565b506040805188815260208101889052908101869052606081018590527f9b776d199f09c774f5b205c9bc2ac6f40d508c347aaea919867eeaf06ebef0e9906080016106d1565b604051634a46c67360e11b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063948d8ce69060240160206040518083038186803b15801561157657600080fd5b505afa15801561158a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ae9190612906565b92915050565b6000806115e07f0000000000000000000000000000000000000000000000000000000000000000611510565b9050600061160d7f0000000000000000000000000000000000000000000000000000000000000000611510565b9050600061161b8584612abe565b905060006116298388612abe565b9050808211611654578161164582670de0b6b3a7640000612abe565b61164f9190612a9c565b611671565b8061166783670de0b6b3a7640000612abe565b6116719190612a9c565b979650505050505050565b6000546001600160a01b031633146116d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b6001600160a01b0381166116fd57604051633ce7a14160e11b815260040160405180910390fd5b6002546040516001600160a01b038084169216907f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435090600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d357600080fd5b6002546001600160a01b031633146117ec57604051634dd4ed5360e01b815260040160405180910390fd5b600254600160e01b900460ff1661181657604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615611848576040516395ebdb5f60e01b815260040160405180910390fd5b6040516382495b4560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260036024820152738DBB8C9bFEb7689f16772c85136993cDA0c05eA4906382495b459060440160006040518083038186803b1580156118c257600080fd5b505af41580156118d6573d6000803e3d6000fd5b50506040517f01aa79da8eb0a8a6f0a19782fb8143ebfa04d6bf15131157d487c743bc28730d925060009150a1565b600260015414156119585760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610593565b60026001556000546001600160a01b031633146119b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600254600160e01b900460ff166119e157604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615611a13576040516395ebdb5f60e01b815260040160405180910390fd5b8115611a4b57611a4b7f000000000000000000000000000000000000000000000000000000000000000083611a46610f8a565b6120c6565b8015611a7e57611a7e7f000000000000000000000000000000000000000000000000000000000000000082611a4661084c565b6000611aa97f0000000000000000000000000000000000000000000000000000000000000000611510565b90506000611ad67f0000000000000000000000000000000000000000000000000000000000000000611510565b6040805186815260208101869052908101849052606081018290529091507f9b776d199f09c774f5b205c9bc2ac6f40d508c347aaea919867eeaf06ebef0e99060800160405180910390a15050600180555050565b6000546001600160a01b03163314611b855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b6001600160a01b038116611c015760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610593565b611c0a81611f92565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fde924f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6857600080fd5b505afa158015611c7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b91906128d0565b6000611cab836121d6565b8015611cbc5750611cbc8383612209565b9392505050565b600067ffffffffffffffff821115611d435760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f34206269747300000000000000000000000000000000000000000000000000006064820152608401610593565b5090565b6000818310611d565781611cbc565b5090919050565b600080611d6985611510565b90506000611d778585612add565b9050600084611d868385612abe565b611d909190612a9c565b604051631feeed5160e11b81526001600160a01b03898116600483015260248201859052604482018390529192507f000000000000000000000000000000000000000000000000000000000000000090911690633fdddaa290606401600060405180830381600087803b158015611e0657600080fd5b505af1158015611e1a573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528992506001600160a01b03831691506370a082319060240160206040518083038186803b158015611e5f57600080fd5b505afa158015611e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e979190612906565b9450611ead6001600160a01b0382163387611f15565b505050509392505050565b600080611ee47f0000000000000000000000000000000000000000000000000000000000000000612307565b9150611f0f7f0000000000000000000000000000000000000000000000000000000000000000612307565b90509091565b6040516001600160a01b038316602482015260448101829052611f8d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915261242e565b505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6120046001600160a01b038416333085612513565b6120386001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000084612551565b604051631c9c3ca760e31b81526001600160a01b03848116600483015260248201849052604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063e4e1e53890606401600060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b50505050505050565b60006120d184611510565b905060006120df8484612a58565b90506000836120ee8385612abe565b6120f89190612a9c565b9050856121106001600160a01b038216333089612513565b6121446001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000088612551565b604051631feeed5160e11b81526001600160a01b03888116600483015260248201859052604482018490527f00000000000000000000000000000000000000000000000000000000000000001690633fdddaa290606401600060405180830381600087803b1580156121b557600080fd5b505af11580156121c9573d6000803e3d6000fd5b5050505050505050505050565b60006121e9826301ffc9a760e01b612209565b80156115ae5750612202826001600160e01b0319612209565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612285908690612997565b6000604051808303818686fa925050503d80600081146122c1576040519150601f19603f3d011682016040523d82523d6000602084013e6122c6565b606091505b50915091506020815110156122e157600093505050506115ae565b8180156122fd5750808060200190518101906122fd91906128d0565b9695505050505050565b60405163cf5e7bd360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063cf5e7bd390602401600060405180830381600087803b15801561236f57600080fd5b505af1158015612383573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528492506001600160a01b03831691506370a082319060240160206040518083038186803b1580156123c857600080fd5b505afa1580156123dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124009190612906565b91506124286124176000546001600160a01b031690565b6001600160a01b0383169084611f15565b50919050565b6000612483826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661267c9092919063ffffffff16565b805190915015611f8d57808060200190518101906124a191906128d0565b611f8d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610593565b6040516001600160a01b038085166024830152831660448201526064810182905261254b9085906323b872dd60e01b90608401611f41565b50505050565b8015806125da5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156125a057600080fd5b505afa1580156125b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d89190612906565b155b61264c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610593565b6040516001600160a01b038316602482015260448101829052611f8d90849063095ea7b360e01b90606401611f41565b606061268b8484600085612693565b949350505050565b60608247101561270b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610593565b843b6127595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610593565b600080866001600160a01b031685876040516127759190612997565b60006040518083038185875af1925050503d80600081146127b2576040519150601f19603f3d011682016040523d82523d6000602084013e6127b7565b606091505b5091509150611671828286606083156127d1575081611cbc565b8251156127e15782518084602001fd5b8160405162461bcd60e51b81526004016105939190612a25565b828054828255906000526020600020908101928215612836579160200282015b8281111561283657825182559160200191906001019061281b565b50611d439291505b80821115611d43576000815560010161283e565b80356001600160a01b038116811461286957600080fd5b919050565b60006020828403121561288057600080fd5b611cbc82612852565b6000806040838503121561289c57600080fd5b6128a583612852565b946020939093013593505050565b6000602082840312156128c557600080fd5b8135611cbc81612b4c565b6000602082840312156128e257600080fd5b8151611cbc81612b4c565b6000602082840312156128ff57600080fd5b5035919050565b60006020828403121561291857600080fd5b5051919050565b6000806040838503121561293257600080fd5b50508035926020909101359150565b6000806040838503121561295457600080fd5b505080516020909101519092909150565b6000806000806080858703121561297b57600080fd5b5050823594602084013594506040840135936060013592509050565b600082516129a9818460208701612af4565b9190910192915050565b600060c082016001600160a01b03891683526020888185015260c0604085015281885180845260e086019150828a01935060005b81811015612a03578451835293830193918301916001016129e7565b50506060850197909752505050608081019290925260a0909101529392505050565b6020815260008251806020840152612a44816040850160208701612af4565b601f01601f19169190910160400192915050565b60008219821115612a6b57612a6b612b20565b500190565b600067ffffffffffffffff808316818516808303821115612a9357612a93612b20565b01949350505050565b600082612ab957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612ad857612ad8612b20565b500290565b600082821015612aef57612aef612b20565b500390565b60005b83811015612b0f578181015183820152602001612af7565b8381111561254b5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8015158114611c0a57600080fdfea164736f6c6343000807000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80635ef3970511610104578063ae2a65a1116100a2578063e211b87511610071578063e211b87514610479578063e2bbb15814610481578063f2fde38b14610494578063fde924f7146104a757600080fd5b8063ae2a65a114610424578063d0ebdbe714610437578063d21220a71461044a578063d4cadf681461047157600080fd5b80638597e879116100de5780638597e879146103b15780638da5cb5b146103c4578063948d8ce6146103d55780639b14d4c6146103e857600080fd5b80635ef397051461037b5780636ea056a914610396578063715018a6146103a957600080fd5b80633a5381b51161017c57806349b595521161014b57806349b59552146103355780634bb278f3146103485780635a8342d8146103505780635ae7ead81461037357600080fd5b80633a5381b5146102b4578063441a3e70146102db5780634771233b146102ee578063481c6a751461032257600080fd5b806316f0115b116101b857806316f0115b1461025c57806324d9ce4b14610283578063252b33131461028b57806334e19907146102a157600080fd5b8063026e9874146101df5780630dfe1681146101f4578063158ef93e14610238575b600080fd5b6101f26101ed366004612965565b6104af565b005b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b60025461024c90600160e01b900460ff1681565b604051901515815260200161022f565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f26106e2565b61029361084c565b60405190815260200161022f565b6101f26102af3660046128ed565b610910565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f26102e936600461291f565b6109f1565b60025461030990600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161022f565b60025461021b906001600160a01b031681565b6101f26103433660046128b3565b610d15565b6101f2610e18565b60035460045461035e919082565b6040805192835260208301919091520161022f565b610293610f8a565b61021b738f7f78080219d4066a8036ccd30d588b416a40db81565b6101f26103a4366004612889565b610ffd565b6101f261106f565b6101f26103bf366004612965565b6110d5565b6000546001600160a01b031661021b565b6102936103e336600461286e565b611510565b61040f7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161022f565b61029361043236600461291f565b6115b4565b6101f261044536600461286e565b61167c565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b610293611766565b6101f26117c1565b6101f261048f36600461291f565b611905565b6101f26104a236600461286e565b611b2b565b61024c611c0d565b6002546001600160a01b031633146104da57604051634dd4ed5360e01b815260040160405180910390fd5b600254600160e01b900460ff1661050457604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615610536576040516395ebdb5f60e01b815260040160405180910390fd5b60006105428383612add565b905060008161055187876115b4565b61055b9190612a9c565b9050670de0b6b3a764000081111561059c57604051631c6ea5b360e11b815260048101829052670de0b6b3a764000060248201526044015b60405180910390fd5b60408051600280825260608201835260009260208301908036833701905050905086816000815181106105d1576105d1612b36565b60200260200101818152505085816001815181106105f1576105f1612b36565b60209081029190910101526040516304ee2fc960e21b815273__$c61de259b17579437cb458fbe4ba8c0f49$__906313b8bf249061065f907f00000000000000000000000000000000000000000000000000000000000000009060039086908b908b906028906004016129b3565b60006040518083038186803b15801561067757600080fd5b505af415801561068b573d6000803e3d6000fd5b5050604080518a8152602081018a9052908101889052606081018790527fb725031571441ba6c801832988142cbdb52dcb6b3a0b2ade758482d7dd2b49c3925060800190505b60405180910390a150505050505050565b6000546001600160a01b0316331461073c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600254600160e01b900460ff1661076657604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615610798576040516395ebdb5f60e01b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff166107c842611cc3565b6107d29190612a70565b600280547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff93841681029190911791829055604051910490911681527f33e822f2bda8444368b3567e3bdbb01de7d80f64a774c929d9f2e7e9b281adc39060200160405180910390a1565b60405163f8b2cb4f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f8b2cb4f906024015b60206040518083038186803b1580156108d357600080fd5b505afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190612906565b905090565b6002546001600160a01b0316331461093b57604051634dd4ed5360e01b815260040160405180910390fd5b6040516334e1990760e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906334e1990790602401600060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050507fcda74150def0ede554aff5f677be9df0e226fddff9bd9ceddf732b9673b1c92d816040516109e691815260200190565b60405180910390a150565b60026001541415610a445760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610593565b60026001556000546001600160a01b03163314610aa35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600254600160e01b900460ff16610acd57604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615610aff576040516395ebdb5f60e01b815260040160405180910390fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de242ff46040518163ffffffff1660e01b8152600401604080518083038186803b158015610b5a57600080fd5b505afa158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190612941565b915091506000610ba0610f8a565b90506000610bac61084c565b90506000610bc485610bbe8986611d47565b90611d47565b90506000610bd685610bbe8986611d47565b90506000808315610c0f57610c0c7f00000000000000000000000000000000000000000000000000000000000000008588611d5d565b91505b8215610c4357610c407f00000000000000000000000000000000000000000000000000000000000000008487611d5d565b90505b6000610c6e7f0000000000000000000000000000000000000000000000000000000000000000611510565b90506000610c9b7f0000000000000000000000000000000000000000000000000000000000000000611510565b604080518e8152602081018e905290810186905260608101859052608081018c905260a081018b905260c0810184905260e081018290529091507f57bcc2baad14202eeb9d757f5fcd8a2b7b8c26a282d9458d460eb52ef532238f906101000160405180910390a150506001805550505050505050505050565b6002546001600160a01b03163314610d4057604051634dd4ed5360e01b815260040160405180910390fd5b600254600160e01b900460ff16610d6a57604051631888b48f60e31b815260040160405180910390fd5b6040516324dacaa960e11b815281151560048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906349b5955290602401600060405180830381600087803b158015610dcd57600080fd5b505af1158015610de1573d6000803e3d6000fd5b505050507f3c83e916edb4c7f342384067941b22663b5093a3cdcc03326de9b8208256b9b2816040516109e6911515815260200190565b60026001541415610e6b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610593565b60026001556000546001600160a01b03163314801590610e9657506002546001600160a01b03163314155b15610eb457604051637849279f60e01b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff16610ee557604051630ce728a360e21b815260040160405180910390fd5b60025442600160a01b90910467ffffffffffffffff161115610f305760025460405163074cec0760e01b8152600160a01b90910467ffffffffffffffff166004820152602401610593565b600080610f3b611eb8565b604080518381526020810183905292945090925033917f616c9469db50815ae0f1d0a020d9fc9060da7c57f03559afb0d4ebdaa0a3a05e910160405180910390a26000546001600160a01b0316ff5b60405163f8b2cb4f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f8b2cb4f906024016108bb565b6000546001600160a01b031633146110575760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b61106b6001600160a01b0383163383611f15565b5050565b6000546001600160a01b031633146110c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b6110d36000611f92565b565b6000546001600160a01b0316331461112f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600254600160e01b900460ff161561115a57604051631ec6430360e31b815260040160405180910390fd5b600280547fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b179055604080516310c5a9c160e11b815290516000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163218b538291600480820192602092909190829003018186803b1580156111ec57600080fd5b505afa158015611200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112249190612906565b905080831015611251576040516318dcdf6360e31b81526004810184905260248101829052604401610593565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4a28a526040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ac57600080fd5b505afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190612906565b9050808411156113115760405163034fe40760e61b81526004810185905260248101829052604401610593565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663867378c56040518163ffffffff1660e01b815260040160206040518083038186803b15801561136c57600080fd5b505afa158015611380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a49190612906565b9050808710156113d1576040516313f4b45960e01b81526004810188905260248101829052604401610593565b828410156113fc576040516318dcdf6360e31b81526004810185905260248101849052604401610593565b818411156114275760405163034fe40760e61b81526004810185905260248101839052604401610593565b80861015611452576040516313f4b45960e01b81526004810187905260248101829052604401610593565b61147d7f00000000000000000000000000000000000000000000000000000000000000008887611fef565b6114a87f00000000000000000000000000000000000000000000000000000000000000008786611fef565b60408051808201909152858152602081018590526114ca9060059060026127fb565b506040805188815260208101889052908101869052606081018590527f9b776d199f09c774f5b205c9bc2ac6f40d508c347aaea919867eeaf06ebef0e9906080016106d1565b604051634a46c67360e11b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063948d8ce69060240160206040518083038186803b15801561157657600080fd5b505afa15801561158a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ae9190612906565b92915050565b6000806115e07f0000000000000000000000000000000000000000000000000000000000000000611510565b9050600061160d7f0000000000000000000000000000000000000000000000000000000000000000611510565b9050600061161b8584612abe565b905060006116298388612abe565b9050808211611654578161164582670de0b6b3a7640000612abe565b61164f9190612a9c565b611671565b8061166783670de0b6b3a7640000612abe565b6116719190612a9c565b979650505050505050565b6000546001600160a01b031633146116d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b6001600160a01b0381166116fd57604051633ce7a14160e11b815260040160405180910390fd5b6002546040516001600160a01b038084169216907f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435090600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156108d357600080fd5b6002546001600160a01b031633146117ec57604051634dd4ed5360e01b815260040160405180910390fd5b600254600160e01b900460ff1661181657604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615611848576040516395ebdb5f60e01b815260040160405180910390fd5b6040516382495b4560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526003602482015273__$c61de259b17579437cb458fbe4ba8c0f49$__906382495b459060440160006040518083038186803b1580156118c257600080fd5b505af41580156118d6573d6000803e3d6000fd5b50506040517f01aa79da8eb0a8a6f0a19782fb8143ebfa04d6bf15131157d487c743bc28730d925060009150a1565b600260015414156119585760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610593565b60026001556000546001600160a01b031633146119b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b600254600160e01b900460ff166119e157604051631888b48f60e31b815260040160405180910390fd5b600254600160a01b900467ffffffffffffffff1615611a13576040516395ebdb5f60e01b815260040160405180910390fd5b8115611a4b57611a4b7f000000000000000000000000000000000000000000000000000000000000000083611a46610f8a565b6120c6565b8015611a7e57611a7e7f000000000000000000000000000000000000000000000000000000000000000082611a4661084c565b6000611aa97f0000000000000000000000000000000000000000000000000000000000000000611510565b90506000611ad67f0000000000000000000000000000000000000000000000000000000000000000611510565b6040805186815260208101869052908101849052606081018290529091507f9b776d199f09c774f5b205c9bc2ac6f40d508c347aaea919867eeaf06ebef0e99060800160405180910390a15050600180555050565b6000546001600160a01b03163314611b855760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610593565b6001600160a01b038116611c015760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610593565b611c0a81611f92565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fde924f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6857600080fd5b505afa158015611c7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b91906128d0565b6000611cab836121d6565b8015611cbc5750611cbc8383612209565b9392505050565b600067ffffffffffffffff821115611d435760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f34206269747300000000000000000000000000000000000000000000000000006064820152608401610593565b5090565b6000818310611d565781611cbc565b5090919050565b600080611d6985611510565b90506000611d778585612add565b9050600084611d868385612abe565b611d909190612a9c565b604051631feeed5160e11b81526001600160a01b03898116600483015260248201859052604482018390529192507f000000000000000000000000000000000000000000000000000000000000000090911690633fdddaa290606401600060405180830381600087803b158015611e0657600080fd5b505af1158015611e1a573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528992506001600160a01b03831691506370a082319060240160206040518083038186803b158015611e5f57600080fd5b505afa158015611e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e979190612906565b9450611ead6001600160a01b0382163387611f15565b505050509392505050565b600080611ee47f0000000000000000000000000000000000000000000000000000000000000000612307565b9150611f0f7f0000000000000000000000000000000000000000000000000000000000000000612307565b90509091565b6040516001600160a01b038316602482015260448101829052611f8d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915261242e565b505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6120046001600160a01b038416333085612513565b6120386001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000084612551565b604051631c9c3ca760e31b81526001600160a01b03848116600483015260248201849052604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063e4e1e53890606401600060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b50505050505050565b60006120d184611510565b905060006120df8484612a58565b90506000836120ee8385612abe565b6120f89190612a9c565b9050856121106001600160a01b038216333089612513565b6121446001600160a01b0382167f000000000000000000000000000000000000000000000000000000000000000088612551565b604051631feeed5160e11b81526001600160a01b03888116600483015260248201859052604482018490527f00000000000000000000000000000000000000000000000000000000000000001690633fdddaa290606401600060405180830381600087803b1580156121b557600080fd5b505af11580156121c9573d6000803e3d6000fd5b5050505050505050505050565b60006121e9826301ffc9a760e01b612209565b80156115ae5750612202826001600160e01b0319612209565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612285908690612997565b6000604051808303818686fa925050503d80600081146122c1576040519150601f19603f3d011682016040523d82523d6000602084013e6122c6565b606091505b50915091506020815110156122e157600093505050506115ae565b8180156122fd5750808060200190518101906122fd91906128d0565b9695505050505050565b60405163cf5e7bd360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063cf5e7bd390602401600060405180830381600087803b15801561236f57600080fd5b505af1158015612383573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528492506001600160a01b03831691506370a082319060240160206040518083038186803b1580156123c857600080fd5b505afa1580156123dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124009190612906565b91506124286124176000546001600160a01b031690565b6001600160a01b0383169084611f15565b50919050565b6000612483826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661267c9092919063ffffffff16565b805190915015611f8d57808060200190518101906124a191906128d0565b611f8d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610593565b6040516001600160a01b038085166024830152831660448201526064810182905261254b9085906323b872dd60e01b90608401611f41565b50505050565b8015806125da5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156125a057600080fd5b505afa1580156125b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d89190612906565b155b61264c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610593565b6040516001600160a01b038316602482015260448101829052611f8d90849063095ea7b360e01b90606401611f41565b606061268b8484600085612693565b949350505050565b60608247101561270b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610593565b843b6127595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610593565b600080866001600160a01b031685876040516127759190612997565b60006040518083038185875af1925050503d80600081146127b2576040519150601f19603f3d011682016040523d82523d6000602084013e6127b7565b606091505b5091509150611671828286606083156127d1575081611cbc565b8251156127e15782518084602001fd5b8160405162461bcd60e51b81526004016105939190612a25565b828054828255906000526020600020908101928215612836579160200282015b8281111561283657825182559160200191906001019061281b565b50611d439291505b80821115611d43576000815560010161283e565b80356001600160a01b038116811461286957600080fd5b919050565b60006020828403121561288057600080fd5b611cbc82612852565b6000806040838503121561289c57600080fd5b6128a583612852565b946020939093013593505050565b6000602082840312156128c557600080fd5b8135611cbc81612b4c565b6000602082840312156128e257600080fd5b8151611cbc81612b4c565b6000602082840312156128ff57600080fd5b5035919050565b60006020828403121561291857600080fd5b5051919050565b6000806040838503121561293257600080fd5b50508035926020909101359150565b6000806040838503121561295457600080fd5b505080516020909101519092909150565b6000806000806080858703121561297b57600080fd5b5050823594602084013594506040840135936060013592509050565b600082516129a9818460208701612af4565b9190910192915050565b600060c082016001600160a01b03891683526020888185015260c0604085015281885180845260e086019150828a01935060005b81811015612a03578451835293830193918301916001016129e7565b50506060850197909752505050608081019290925260a0909101529392505050565b6020815260008251806020840152612a44816040850160208701612af4565b601f01601f19169190910160400192915050565b60008219821115612a6b57612a6b612b20565b500190565b600067ffffffffffffffff808316818516808303821115612a9357612a93612b20565b01949350505050565b600082612ab957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612ad857612ad8612b20565b500290565b600082821015612aef57612aef612b20565b500390565b60005b83811015612b0f578181015183820152602001612af7565b8381111561254b5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8015158114611c0a57600080fdfea164736f6c6343000807000a",
  "libraries": {
    "SmartPoolManager": "0x8DBB8C9bFEb7689f16772c85136993cDA0c05eA4"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,uint256)": {
        "params": {
          "amount0": "Amount to deposit of first token.",
          "amount1": "Amount to deposit of second token."
        }
      },
      "getDenormalizedWeight(address)": {
        "returns": {
          "_0": "Denormalized weight value from underlying Balancer pool."
        }
      },
      "getSwapFee()": {
        "returns": {
          "_0": "Swap fee from underlying Balancer pool."
        }
      },
      "getWeightsChangeRatio(uint256,uint256)": {
        "details": "Will only be called by updateWeightsGradually().",
        "params": {
          "targetWeight0": "Target weight of first token.",
          "targetWeight1": "Target weight of second token."
        },
        "returns": {
          "_0": "Change ratio from current weights to target weights."
        }
      },
      "holdings0()": {
        "returns": {
          "_0": "Token balance in underlying pool"
        }
      },
      "holdings1()": {
        "returns": {
          "_0": "Token balance in underlying pool"
        }
      },
      "initialDeposit(uint256,uint256,uint256,uint256)": {
        "details": "Initial deposit must be performed before      calling withdraw() or deposit() functions.",
        "params": {
          "amount0": "Deposited amount of first token.",
          "amount1": "Deposited amount of second token.",
          "weight0": "Initial weight of first token.",
          "weight1": "Initial weight of second token."
        }
      },
      "isPublicSwap()": {
        "returns": {
          "_0": "If public swap is turned on, returns true, otherwise false."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPublicSwap(bool)": {
        "params": {
          "value": "New state of public swap."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateWeightsGradually(uint256,uint256,uint256,uint256)": {
        "params": {
          "endBlock": "Block number at which the weights should reach target.",
          "startBlock": "Block number at which weight movement starts.",
          "targetWeight0": "Target weight of first token.",
          "targetWeight1": "Target weight of second token."
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount0": "Requested amount of first token.",
          "amount1": "Requested amount of second token."
        }
      }
    },
    "stateVariables": {
      "__bfactory": {
        "details": "Balancer addresses taken from https://docs.balancer.fi/v/v1/smart-contracts/addresses#kovan"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Mammon__SameTokenAddresses(address)": [
        {
          "notice": "ERRORS ///"
        }
      ]
    },
    "events": {
      "Created(address,address,address,address,address,uint32)": {
        "notice": "Emitted when the vault is created."
      },
      "Deposit(uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when tokens are deposited."
      },
      "FinalizationInitialized(uint64)": {
        "notice": "Emitted when initializeFinalization is called."
      },
      "Finalized(address,uint256,uint256)": {
        "notice": "Emitted when vault is finalized."
      },
      "ManagerChanged(address,address)": {
        "notice": "Emitted when manager is changed."
      },
      "PokeWeights()": {
        "notice": "Emitted when pokeWeights is called."
      },
      "SetPublicSwap(bool)": {
        "notice": "Emitted when public swap is turned on/off."
      },
      "SetSwapFee(uint256)": {
        "notice": "Emitted when swap fee is updated."
      },
      "UpdateWeightsGradually(uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when updateWeightsGradually is called."
      },
      "Withdraw(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when tokens are withdrawn."
      }
    },
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256)": {
        "notice": "Deposit tokens into vault."
      },
      "finalize()": {
        "notice": "Destroy vault and returns all funds to treasury owner."
      },
      "getDenormalizedWeight(address)": {
        "notice": "Get token weight."
      },
      "getSwapFee()": {
        "notice": "Get swap fee."
      },
      "getWeightsChangeRatio(uint256,uint256)": {
        "notice": "Calculate change ratio for weights upgrade."
      },
      "holdings0()": {
        "notice": "Balance of the first token"
      },
      "holdings1()": {
        "notice": "Balance of the second token"
      },
      "initialDeposit(uint256,uint256,uint256,uint256)": {
        "notice": "Initialize Vault with first deposit."
      },
      "initializeFinalization()": {
        "notice": "Initiate vault destruction and return all funds to treasury owner."
      },
      "initialized()": {
        "notice": "Indicates that the Vault has been initialized"
      },
      "isPublicSwap()": {
        "notice": "Check if vault trading is enabled."
      },
      "manager()": {
        "notice": "Submits new balance parameters for the vault"
      },
      "noticePeriod()": {
        "notice": "Notice period for vault termination (in seconds)."
      },
      "noticeTimeoutAt()": {
        "notice": "Timestamp when notice elapses or 0 if not yet set"
      },
      "pokeWeights()": {
        "notice": "Update weights if within update window."
      },
      "pool()": {
        "notice": "Balancer pool. Controlled by the vault."
      },
      "setManager(address)": {
        "notice": "Change manager."
      },
      "setPublicSwap(bool)": {
        "notice": "Emitted when public swap is turned on/off."
      },
      "setSwapFee(uint256)": {
        "notice": "Change swap fee."
      },
      "sweep(address,uint256)": {
        "notice": "Withdraw any tokens accidentally sent to vault."
      },
      "token0()": {
        "notice": "First token address in vault."
      },
      "token1()": {
        "notice": "Second token address in vault."
      },
      "updateWeightsGradually(uint256,uint256,uint256,uint256)": {
        "notice": "Initiate weight move to target in given update window."
      },
      "validator()": {
        "notice": "Verifies withdraw limits."
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw tokens up to requested amounts."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4173,
        "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4373,
        "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 78,
        "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
        "label": "manager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 81,
        "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
        "label": "noticeTimeoutAt",
        "offset": 20,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 84,
        "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
        "label": "initialized",
        "offset": 28,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 87,
        "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
        "label": "gradualUpdate",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(GradualUpdateParams)5574_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_struct(GradualUpdateParams)5574_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.GradualUpdateParams",
        "members": [
          {
            "astId": 5565,
            "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5567,
            "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5570,
            "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
            "label": "startWeights",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5573,
            "contract": "contracts/MammonVaultV0Kovan.sol:MammonVaultV0Kovan",
            "label": "endWeights",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
