{
  "address": "0x047F5748Ed6b72d2EDB48B9c36CeC1446725AF95",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "manager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "validator_",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "noticePeriod_",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "description_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "Mammon__AmountExceedAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "Mammon__AmountIsBelowMin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountLength",
          "type": "uint256"
        }
      ],
      "name": "Mammon__AmountLengthIsNotSame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__CallerIsNotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__CallerIsNotOwnerOrManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__FinalizationNotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__ManagerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Mammon__NoticePeriodIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "noticeTimeoutAt",
          "type": "uint64"
        }
      ],
      "name": "Mammon__NoticeTimeoutNotElapsed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "Mammon__ValidatorIsNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__VaultIsAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__VaultIsFinalizing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mammon__VaultNotInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "Mammon__WeightChangeDurationIsBelowMin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "Mammon__WeightIsAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "Mammon__WeightIsBelowMin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weightLength",
          "type": "uint256"
        }
      ],
      "name": "Mammon__WeightLengthIsNotSame",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "noticePeriod",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "noticeTimeoutAt",
          "type": "uint64"
        }
      ],
      "name": "FinalizationInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapEnabled",
          "type": "bool"
        }
      ],
      "name": "SetSwapEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "name": "SetSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "UpdateWeightsGradually",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "requestedAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "withdrawnAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "allowances",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bVault",
      "outputs": [
        {
          "internalType": "contract IBVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHoldings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNormalizedWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokensData",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "holding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "initialDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeFinalization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noticePeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noticeTimeoutAt",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IBManagedPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setSwapEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "targetWeights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "updateWeightsGradually",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validator",
      "outputs": [
        {
          "internalType": "contract IWithdrawalValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
  "receipt": {
    "to": null,
    "from": "0xca8208694cC5CF50aB48Cd6B4b7b0F05FFc80928",
    "contractAddress": "0x047F5748Ed6b72d2EDB48B9c36CeC1446725AF95",
    "transactionIndex": 0,
    "gasUsed": "8203363",
    "logsBloom": "0x00000000000000102008002000000000000000010040000c00800000000000000000004000000000000200010000000000000000000000000000000004002000010000004000000001040000010000000005400000001000000000180000010000008000020000000800400000000800000000000000000000000010220000400000000000000000000000000000000000000000040000022000000000000000000000000000002000000003000000000000004002000000000100001000000040000000800000002344080000000000200000000000000000000000000020040000000000000000000000004000000000020400002000000000002000010010",
    "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e",
    "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0x047F5748Ed6b72d2EDB48B9c36CeC1446725AF95",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ca8208694cc5cf50ab48cd6b4b7b0f05ffc80928"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0x3A3b032aAacE03361a4FA00f2Bd8b7b1a2BD0786",
        "topics": [
          "0xa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000e8d4a51000",
        "logIndex": 1,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
        "topics": [
          "0x3c13bc30b8e878c53fd2a36b679409c073afd75950be43d8858768e956fbc20e",
          "0x3a3b032aaace03361a4fa00f2bd8b7b1a2bd0786000200000000000000000616",
          "0x0000000000000000000000003a3b032aaace03361a4fa00f2bd8b7b1a2bd0786"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 2,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
        "topics": [
          "0xf5847d3f2197b16cdcd2098ec95d0905cd1abdaf415f07bb7cef2bba8ac5dec4",
          "0x3a3b032aaace03361a4fa00f2bd8b7b1a2bd0786000200000000000000000616"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003c16c121573749fe5566e1d9cd176a2085b4ec2000000000000000000000000051f85fa7cd876997c44760fb94b2a51ba73abe140000000000000000000000000000000000000000000000000000000000000002000000000000000000000000047f5748ed6b72d2edb48b9c36cec1446725af95000000000000000000000000047f5748ed6b72d2edb48b9c36cec1446725af95",
        "logIndex": 3,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0x3A3b032aAacE03361a4FA00f2Bd8b7b1a2BD0786",
        "topics": [
          "0x0f3631f9dab08169d1db21c6dc5f32536fb2b0a6b9bb5330d71c52132f968be0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000061f4a7080000000000000000000000000000000000000000000000000000000061f4a708000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000c1c9509d1dfd3c200000000000000000000000000000000000000000000000001c421a9d5842c3e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000c1c9509d1dfd3c200000000000000000000000000000000000000000000000001c421a9d5842c3e",
        "logIndex": 4,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0x3A3b032aAacE03361a4FA00f2Bd8b7b1a2BD0786",
        "topics": [
          "0x5a9e84f78f7957cb4ed7478eb0fcad35ee4ecbe2e0f298420b28a3955392573f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0x3A3b032aAacE03361a4FA00f2Bd8b7b1a2BD0786",
        "topics": [
          "0x5353e2cb47d505ba9b628610daec53fc41f3a4259dab35a757b0f1d5a58bc1c3"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 6,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0x3A3b032aAacE03361a4FA00f2Bd8b7b1a2BD0786",
        "topics": [
          "0xeba99e9e36df79031493efd8473cfce5475d3a135878665490df8b0140693210"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 7,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0xd46eD43509Dd67683f2B756C254445670f0ff565",
        "topics": [
          "0x83a48fbcfc991335314e74d0496aab6a1987e992ddc85dddbcc4d6dd6ef2e9fc",
          "0x0000000000000000000000003a3b032aaace03361a4fa00f2bd8b7b1a2bd0786"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0x047F5748Ed6b72d2EDB48B9c36CeC1446725AF95",
        "topics": [
          "0x4849aacb71900195a19f34665b8adbb4a9af2e7761a96bd71b2c0de2200ec47a",
          "0x000000000000000000000000d46ed43509dd67683f2b756c254445670f0ff565"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000023e2db566af28810446af4f001f1929edf6e884100000000000000000000000097246142314dc1e20b03c3f9c12432d75425b95e000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003c16c121573749fe5566e1d9cd176a2085b4ec2000000000000000000000000051f85fa7cd876997c44760fb94b2a51ba73abe1400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000c1c9509d1dfd3c200000000000000000000000000000000000000000000000001c421a9d5842c3e000000000000000000000000000000000000000000000000000000000000000754657374696e6700000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29529195,
        "transactionHash": "0xe170aa7d24777f4663906598cea628aac40a41ab2f220b0853a52739d0cdc7ba",
        "address": "0x047F5748Ed6b72d2EDB48B9c36CeC1446725AF95",
        "topics": [
          "0x605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a4350",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023e2db566af28810446af4f001f1929edf6e8841"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xff4ff10c9c587e858bdfebe987f9d633c8cfff307e50bf7b99ad05e2f2be588e"
      }
    ],
    "blockNumber": 29529195,
    "cumulativeGasUsed": "8203363",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd46eD43509Dd67683f2B756C254445670f0ff565",
    "Mammon",
    "MAMM",
    [
      "0x3C16C121573749Fe5566E1d9cd176a2085b4Ec20",
      "0x51F85fA7cD876997c44760FB94b2a51ba73ABe14"
    ],
    [
      "872736297211384770",
      "127263702788615230"
    ],
    "1000000000000",
    "0x23E2DB566af28810446aF4f001F1929edf6E8841",
    "0x97246142314dc1e20b03c3f9c12432d75425b95e",
    "30",
    "Testing"
  ],
  "solcInputHash": "92382bea342e923ad8943d59102c1a87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validator_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"noticePeriod_\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"Mammon__AmountExceedAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Mammon__AmountIsBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLength\",\"type\":\"uint256\"}],\"name\":\"Mammon__AmountLengthIsNotSame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__CallerIsNotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__CallerIsNotOwnerOrManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__FinalizationNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__ManagerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Mammon__NoticePeriodIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"noticeTimeoutAt\",\"type\":\"uint64\"}],\"name\":\"Mammon__NoticeTimeoutNotElapsed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Mammon__ValidatorIsNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__VaultIsAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__VaultIsFinalizing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mammon__VaultNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Mammon__WeightChangeDurationIsBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Mammon__WeightIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Mammon__WeightIsBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weightLength\",\"type\":\"uint256\"}],\"name\":\"Mammon__WeightLengthIsNotSame\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"noticePeriod\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"noticeTimeoutAt\",\"type\":\"uint64\"}],\"name\":\"FinalizationInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"SetSwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"SetSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"UpdateWeightsGradually\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestedAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"withdrawnAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"allowances\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bVault\",\"outputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNormalizedWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensData\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"holding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"initialDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeFinalization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticeTimeoutAt\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IBManagedPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"targetWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"updateWeightsGradually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"contract IWithdrawalValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Vault owner is the asset owner.\",\"events\":{\"Created(address,address[],uint256[],address,address,uint32,string)\":{\"params\":{\"description\":\"Vault description.\",\"factory\":\"Address of Balancer Managed Pool factory.\",\"manager\":\"Address of vault manager.\",\"noticePeriod\":\"Notice period in seconds.\",\"tokens\":\"Address of tokens.\",\"validator\":\"Address of withdrawal validator contract\",\"weights\":\"Weights of tokens.\"}},\"Deposit(uint256[],uint256[])\":{\"params\":{\"amounts\":\"Amounts of tokens.\",\"weights\":\"Weights of tokens after deposit.\"}},\"FinalizationInitialized(uint64)\":{\"params\":{\"noticeTimeoutAt\":\"Timestamp for notice timeout.\"}},\"Finalized(address,uint256[])\":{\"params\":{\"amounts\":\"Returned amount of tokens.\",\"caller\":\"Address of finalizer.\"}},\"ManagerChanged(address,address)\":{\"params\":{\"manager\":\"Address of a new manager.\",\"previousManager\":\"Address of previous manager.\"}},\"SetSwapEnabled(bool)\":{\"params\":{\"swapEnabled\":\"New state of swap.\"}},\"SetSwapFee(uint256)\":{\"params\":{\"swapFee\":\"New swap fee.\"}},\"UpdateWeightsGradually(uint256,uint256,uint256[])\":{\"params\":{\"endTime\":\"End timestamp of updates.\",\"startTime\":\"Start timestamp of updates.\",\"weights\":\"The target weights of the tokens.\"}},\"Withdraw(uint256[],uint256[],uint256[],uint256[])\":{\"params\":{\"allowances\":\"Allowance of tokens.\",\"requestedAmounts\":\"Requested amount of tokens.\",\"weights\":\"Weight of tokens after withdrawal.\",\"withdrawnAmounts\":\"Withdrawn amount of tokens.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"First token and second token shouldn't be same. Validator should conform to interface.\",\"params\":{\"description_\":\"Vault text description. Keep it short and simple, please.\",\"factory\":\"Balancer Managed Pool Factory address.\",\"manager_\":\"Vault manager address.\",\"name\":\"Name of a Pool Token.\",\"noticePeriod_\":\"Notice period in seconds.\",\"swapFeePercentage\":\"Swap fee of the pool.\",\"symbol\":\"Symbol of a Pool Token.\",\"tokens\":\"Address of tokens.\",\"validator_\":\"Withdrawal validator contract address.\"}},\"deposit(uint256[])\":{\"params\":{\"amounts\":\"Amount to deposit of tokens.\"}},\"getHoldings()\":{\"returns\":{\"amounts\":\"Token balances in underlying pool\"}},\"getNormalizedWeights()\":{\"returns\":{\"_0\":\"Normalized weights of tokens on Balancer pool.\"}},\"getPoolId()\":{\"returns\":{\"_0\":\"Pool ID of Balancer pool on Vault.\"}},\"getSwapFee()\":{\"returns\":{\"_0\":\"Swap fee from underlying Balancer pool.\"}},\"getTokens()\":{\"returns\":{\"tokens\":\"IERC20 tokens of Balancer pool.\"}},\"getTokensData()\":{\"returns\":{\"_0\":\"IERC20 tokens of Balancer pool.\",\"_1\":\"Balances of tokens of Balancer pool.\",\"_2\":\"Last updated Blocknumber.\"}},\"holding(uint256)\":{\"returns\":{\"_0\":\"Token balance in underlying pool\"}},\"initialDeposit(uint256[])\":{\"details\":\"Initial deposit must be performed before      calling withdraw() or deposit() functions.\",\"params\":{\"amounts\":\"Deposit amount of tokens.\"}},\"isSwapEnabled()\":{\"returns\":{\"_0\":\"If public swap is turned on, returns true, otherwise false.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSwapEnabled(bool)\":{\"params\":{\"value\":\"New state of swap.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateWeightsGradually(uint256[],uint256,uint256)\":{\"params\":{\"endTime\":\"Timestamp at when the weights should reach target.\",\"startTime\":\"Timestamp at when weight movement starts.\",\"targetWeights\":\"Target weights of tokens.\"}},\"withdraw(uint256[])\":{\"params\":{\"amounts\":\"Requested amount of tokens.\"}}},\"stateVariables\":{\"UNSET_MANAGER_ADDRESS\":{\"details\":\"Address to represent unset manager in events.\"},\"description\":{\"details\":\"string cannot be immutable bytecode but only set in constructor\"}},\"title\":\"Risk-managed treasury vault.\",\"version\":1},\"userdoc\":{\"errors\":{\"Mammon__WeightLengthIsNotSame(uint256,uint256)\":[{\"notice\":\"ERRORS ///\"}]},\"events\":{\"Created(address,address[],uint256[],address,address,uint32,string)\":{\"notice\":\"Emitted when the vault is created.\"},\"Deposit(uint256[],uint256[])\":{\"notice\":\"Emitted when tokens are deposited.\"},\"FinalizationInitialized(uint64)\":{\"notice\":\"Emitted when initializeFinalization is called.\"},\"Finalized(address,uint256[])\":{\"notice\":\"Emitted when vault is finalized.\"},\"ManagerChanged(address,address)\":{\"notice\":\"Emitted when manager is changed.\"},\"SetSwapEnabled(bool)\":{\"notice\":\"Emitted when swap is enabled/disabled.\"},\"SetSwapFee(uint256)\":{\"notice\":\"Emitted when swap fee is updated.\"},\"UpdateWeightsGradually(uint256,uint256,uint256[])\":{\"notice\":\"Emitted when updateWeightsGradually is called.\"},\"Withdraw(uint256[],uint256[],uint256[],uint256[])\":{\"notice\":\"Emitted when tokens are withdrawn.\"}},\"kind\":\"user\",\"methods\":{\"bVault()\":{\"notice\":\"Balancer Vault. Controlled by Mammon Vault.\"},\"constructor\":{\"notice\":\"Initialize the contract by deploying new Balancer pool using the provided factory.\"},\"deposit(uint256[])\":{\"notice\":\"Deposit tokens into vault.\"},\"description()\":{\"notice\":\"STORAGE SLOT START ///Describes vault purpose and modelling assumptions for differentiating between vaults\"},\"finalize()\":{\"notice\":\"Destroy vault and returns all funds to treasury owner.\"},\"getHoldings()\":{\"notice\":\"Balance of the tokens\"},\"getNormalizedWeights()\":{\"notice\":\"Get token weights.\"},\"getPoolId()\":{\"notice\":\"Get Pool ID.\"},\"getSwapFee()\":{\"notice\":\"Get swap fee.\"},\"getTokens()\":{\"notice\":\"Get IERC20 Tokens Balancer Pool.\"},\"getTokensData()\":{\"notice\":\"Get Token Data of Balancer Pool.\"},\"holding(uint256)\":{\"notice\":\"Balance of the token with index\"},\"initialDeposit(uint256[])\":{\"notice\":\"Initialize Vault with first deposit.\"},\"initializeFinalization()\":{\"notice\":\"Initiate vault destruction and return all funds to treasury owner.\"},\"initialized()\":{\"notice\":\"Indicates that the Vault has been initialized\"},\"isSwapEnabled()\":{\"notice\":\"Check if vault trading is enabled.\"},\"manager()\":{\"notice\":\"Submits new balance parameters for the vault\"},\"noticePeriod()\":{\"notice\":\"Notice period for vault termination (in seconds).\"},\"noticeTimeoutAt()\":{\"notice\":\"Timestamp when notice elapses or 0 if not yet set\"},\"pool()\":{\"notice\":\"Balancer pool. Controlled by the Balancer vault.\"},\"setManager(address)\":{\"notice\":\"Change manager.\"},\"setSwapEnabled(bool)\":{\"notice\":\"Enable or disable swap.\"},\"setSwapFee(uint256)\":{\"notice\":\"Change swap fee.\"},\"sweep(address,uint256)\":{\"notice\":\"Withdraw any tokens accidentally sent to vault.\"},\"updateWeightsGradually(uint256[],uint256,uint256)\":{\"notice\":\"Initiate weight move to target in given update window.\"},\"validator()\":{\"notice\":\"Verifies withdraw limits.\"},\"withdraw(uint256[])\":{\"notice\":\"Withdraw tokens up to requested amounts.\"}},\"notice\":\"Managed n-asset vault that supports withdrawals         in line with a pre-defined validator contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MammonVaultV1.sol\":\"MammonVaultV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/MammonVaultV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"./dependencies/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/IERC165.sol\\\";\\nimport \\\"./dependencies/openzeppelin/Ownable.sol\\\";\\nimport \\\"./dependencies/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"./dependencies/openzeppelin/Math.sol\\\";\\nimport \\\"./dependencies/openzeppelin/SafeCast.sol\\\";\\nimport \\\"./dependencies/openzeppelin/ERC165Checker.sol\\\";\\nimport \\\"./interfaces/IMammonPoolFactoryV1.sol\\\";\\nimport \\\"./interfaces/IBVault.sol\\\";\\nimport \\\"./interfaces/IBManagedPool.sol\\\";\\nimport \\\"./interfaces/IMammonVaultV1.sol\\\";\\nimport \\\"./interfaces/IWithdrawalValidator.sol\\\";\\n\\n/// @title Risk-managed treasury vault.\\n/// @notice Managed n-asset vault that supports withdrawals\\n///         in line with a pre-defined validator contract.\\n/// @dev Vault owner is the asset owner.\\ncontract MammonVaultV1 is IMammonVaultV1, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n    using SafeCast for uint256;\\n\\n    /// STORAGE ///\\n\\n    uint256 private constant ONE = 10**18;\\n\\n    /// @notice Minimum period for weight change duration.\\n    // uint256 private constant MINIMUM_WEIGHT_CHANGE_DURATION = 1 days;\\n    uint256 private constant MINIMUM_WEIGHT_CHANGE_DURATION = 1 seconds;\\n\\n    /// @dev Address to represent unset manager in events.\\n    address private constant UNSET_MANAGER_ADDRESS = address(0);\\n\\n    /// @notice Largest possible notice period for vault termination (2 months).\\n    uint256 private constant MAX_NOTICE_PERIOD = 60 days;\\n\\n    /// @notice Balancer Vault. Controlled by Mammon Vault.\\n    IBVault public immutable bVault;\\n\\n    /// @notice Balancer pool. Controlled by the Balancer vault.\\n    IBManagedPool public immutable pool;\\n\\n    /// @notice Notice period for vault termination (in seconds).\\n    uint32 public immutable noticePeriod;\\n\\n    /// @notice Verifies withdraw limits.\\n    IWithdrawalValidator public immutable validator;\\n\\n    /// STORAGE SLOT START ///\\n    /// @notice Describes vault purpose and modelling assumptions for differentiating between vaults\\n    /// @dev string cannot be immutable bytecode but only set in constructor\\n    string public description;\\n\\n    /// @notice Submits new balance parameters for the vault\\n    address public manager;\\n\\n    /// @notice Timestamp when notice elapses or 0 if not yet set\\n    uint64 public noticeTimeoutAt;\\n\\n    /// @notice Indicates that the Vault has been initialized\\n    bool public initialized;\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when the vault is created.\\n    /// @param factory Address of Balancer Managed Pool factory.\\n    /// @param tokens Address of tokens.\\n    /// @param weights Weights of tokens.\\n    /// @param manager Address of vault manager.\\n    /// @param validator Address of withdrawal validator contract\\n    /// @param noticePeriod Notice period in seconds.\\n    /// @param description Vault description.\\n    event Created(\\n        address indexed factory,\\n        IERC20[] tokens,\\n        uint256[] weights,\\n        address manager,\\n        address validator,\\n        uint32 noticePeriod,\\n        string description\\n    );\\n\\n    /// @notice Emitted when tokens are deposited.\\n    /// @param amounts Amounts of tokens.\\n    /// @param weights Weights of tokens after deposit.\\n    event Deposit(uint256[] amounts, uint256[] weights);\\n\\n    /// @notice Emitted when tokens are withdrawn.\\n    /// @param requestedAmounts Requested amount of tokens.\\n    /// @param withdrawnAmounts Withdrawn amount of tokens.\\n    /// @param allowances Allowance of tokens.\\n    /// @param weights Weight of tokens after withdrawal.\\n    event Withdraw(\\n        uint256[] requestedAmounts,\\n        uint256[] withdrawnAmounts,\\n        uint256[] allowances,\\n        uint256[] weights\\n    );\\n\\n    /// @notice Emitted when manager is changed.\\n    /// @param previousManager Address of previous manager.\\n    /// @param manager Address of a new manager.\\n    event ManagerChanged(\\n        address indexed previousManager,\\n        address indexed manager\\n    );\\n\\n    /// @notice Emitted when updateWeightsGradually is called.\\n    /// @param startTime Start timestamp of updates.\\n    /// @param endTime End timestamp of updates.\\n    /// @param weights The target weights of the tokens.\\n    event UpdateWeightsGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] weights\\n    );\\n\\n    /// @notice Emitted when swap is enabled/disabled.\\n    /// @param swapEnabled New state of swap.\\n    event SetSwapEnabled(bool swapEnabled);\\n\\n    /// @notice Emitted when swap fee is updated.\\n    /// @param swapFee New swap fee.\\n    event SetSwapFee(uint256 swapFee);\\n\\n    /// @notice Emitted when initializeFinalization is called.\\n    /// @param noticeTimeoutAt Timestamp for notice timeout.\\n    event FinalizationInitialized(uint64 noticeTimeoutAt);\\n\\n    /// @notice Emitted when vault is finalized.\\n    /// @param caller Address of finalizer.\\n    /// @param amounts Returned amount of tokens.\\n    event Finalized(address indexed caller, uint256[] amounts);\\n\\n    /// ERRORS ///\\n\\n    error Mammon__WeightLengthIsNotSame(\\n        uint256 tokenLength,\\n        uint256 weightLength\\n    );\\n    error Mammon__AmountLengthIsNotSame(\\n        uint256 tokenLength,\\n        uint256 amountLength\\n    );\\n    error Mammon__ValidatorIsNotValid(address validator);\\n    error Mammon__NoticePeriodIsAboveMax(uint256 actual, uint256 max);\\n    error Mammon__CallerIsNotOwnerOrManager();\\n    error Mammon__NoticeTimeoutNotElapsed(uint64 noticeTimeoutAt);\\n    error Mammon__ManagerIsZeroAddress();\\n    error Mammon__CallerIsNotManager();\\n    error Mammon__WeightChangeDurationIsBelowMin(uint256 actual, uint256 min);\\n    error Mammon__WeightIsAboveMax(uint256 actual, uint256 max);\\n    error Mammon__WeightIsBelowMin(uint256 actual, uint256 min);\\n    error Mammon__AmountIsBelowMin(uint256 actual, uint256 min);\\n    error Mammon__AmountExceedAvailable(\\n        address token,\\n        uint256 amount,\\n        uint256 available\\n    );\\n    error Mammon__FinalizationNotInitialized();\\n    error Mammon__VaultNotInitialized();\\n    error Mammon__VaultIsAlreadyInitialized();\\n    error Mammon__VaultIsFinalizing();\\n\\n    /// MODIFIERS ///\\n\\n    /// @dev Throws if called by any account other than the manager.\\n    modifier onlyManager() {\\n        if (msg.sender != manager) {\\n            revert Mammon__CallerIsNotManager();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or manager.\\n    modifier onlyOwnerOrManager() {\\n        if (msg.sender != owner() && msg.sender != manager) {\\n            revert Mammon__CallerIsNotOwnerOrManager();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called before vault is initialized.\\n    modifier onlyInitialized() {\\n        if (!initialized) {\\n            revert Mammon__VaultNotInitialized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called before finalization is initialized.\\n    modifier nonFinalizing() {\\n        if (noticeTimeoutAt != 0) {\\n            revert Mammon__VaultIsFinalizing();\\n        }\\n        _;\\n    }\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Initialize the contract by deploying new Balancer pool using the provided factory.\\n    /// @dev First token and second token shouldn't be same. Validator should conform to interface.\\n    /// @param factory Balancer Managed Pool Factory address.\\n    /// @param name Name of a Pool Token.\\n    /// @param symbol Symbol of a Pool Token.\\n    /// @param tokens Address of tokens.\\n    /// @param swapFeePercentage Swap fee of the pool.\\n    /// @param manager_ Vault manager address.\\n    /// @param validator_ Withdrawal validator contract address.\\n    /// @param noticePeriod_ Notice period in seconds.\\n    /// @param description_ Vault text description. Keep it short and simple, please.\\n    constructor(\\n        address factory,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256[] memory weights,\\n        uint256 swapFeePercentage,\\n        address manager_,\\n        address validator_,\\n        uint32 noticePeriod_,\\n        string memory description_\\n    ) {\\n        if (tokens.length != weights.length) {\\n            revert Mammon__WeightLengthIsNotSame(\\n                tokens.length,\\n                weights.length\\n            );\\n        }\\n        if (\\n            !ERC165Checker.supportsInterface(\\n                validator_,\\n                type(IWithdrawalValidator).interfaceId\\n            )\\n        ) {\\n            revert Mammon__ValidatorIsNotValid(validator_);\\n        }\\n        if (noticePeriod_ > MAX_NOTICE_PERIOD) {\\n            revert Mammon__NoticePeriodIsAboveMax(\\n                noticePeriod_,\\n                MAX_NOTICE_PERIOD\\n            );\\n        }\\n\\n        address[] memory managers = new address[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            managers[i] = address(this);\\n        }\\n\\n        pool = IBManagedPool(\\n            IMammonPoolFactoryV1(factory).create(\\n                name,\\n                symbol,\\n                tokens,\\n                weights,\\n                managers,\\n                swapFeePercentage,\\n                address(this),\\n                false,\\n                true,\\n                0\\n            )\\n        );\\n\\n        bVault = IMammonPoolFactoryV1(factory).getVault();\\n        manager = manager_;\\n        validator = IWithdrawalValidator(validator_);\\n        noticePeriod = noticePeriod_;\\n        description = description_;\\n\\n        emit Created(\\n            factory,\\n            tokens,\\n            weights,\\n            manager_,\\n            validator_,\\n            noticePeriod_,\\n            description_\\n        );\\n        emit ManagerChanged(UNSET_MANAGER_ADDRESS, manager_);\\n    }\\n\\n    /// PROTOCOL API ///\\n\\n    /// @inheritdoc IProtocolAPI\\n    function initialDeposit(uint256[] calldata amounts)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (initialized) {\\n            revert Mammon__VaultIsAlreadyInitialized();\\n        }\\n        initialized = true;\\n\\n        IERC20[] memory tokens = getTokens();\\n\\n        if (tokens.length != amounts.length) {\\n            revert Mammon__AmountLengthIsNotSame(\\n                tokens.length,\\n                amounts.length\\n            );\\n        }\\n\\n        /// must encode the userData for join as below\\n        /// abi.encode(JoinKind.INIT, initBalances)\\n        /// ManagedPool JoinKinds:\\n        /// enum JoinKind {\\n        ///     INIT,\\n        ///     EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        ///     TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ///     ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n        /// }\\n        bytes memory initUserData = abi.encode(0, amounts);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (amounts[i] > 0) {\\n                depositToken(tokens[i], amounts[i]);\\n            }\\n        }\\n\\n        IBVault.JoinPoolRequest memory joinPoolRequest = IBVault\\n            .JoinPoolRequest({\\n                assets: tokens,\\n                maxAmountsIn: amounts,\\n                userData: initUserData,\\n                fromInternalBalance: false\\n            });\\n        bVault.joinPool(\\n            getPoolId(),\\n            address(this),\\n            address(this),\\n            joinPoolRequest\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function deposit(uint256[] calldata amounts)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        onlyInitialized\\n        nonFinalizing\\n    {\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n\\n        if (tokens.length != amounts.length) {\\n            revert Mammon__AmountLengthIsNotSame(\\n                tokens.length,\\n                amounts.length\\n            );\\n        }\\n\\n        uint256[] memory weights = getNormalizedWeights();\\n        uint256[] memory newWeights = new uint256[](tokens.length);\\n        uint256 weightSum;\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] > 0) {\\n                depositToken(tokens[i], amounts[i]);\\n\\n                uint256 newBalance = holdings[i] + amounts[i];\\n                newWeights[i] = (weights[i] * newBalance) / holdings[i];\\n            } else {\\n                newWeights[i] = weights[i];\\n            }\\n\\n            weightSum += newWeights[i];\\n        }\\n\\n        /// Set managed balance of pool as amounts\\n        /// i.e. Deposit amounts of tokens to pool from Mammon Vault\\n        updatePoolBalance(amounts, IBVault.PoolBalanceOpKind.UPDATE);\\n        /// Decrease managed balance and increase cash balance of pool\\n        /// i.e. Move amounts from managed balance to cash balance\\n        updatePoolBalance(amounts, IBVault.PoolBalanceOpKind.DEPOSIT);\\n\\n        updateWeights(newWeights, weightSum);\\n\\n        emit Deposit(amounts, getNormalizedWeights());\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function withdraw(uint256[] calldata amounts)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        onlyInitialized\\n        nonFinalizing\\n    {\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n\\n        if (tokens.length != amounts.length) {\\n            revert Mammon__AmountLengthIsNotSame(\\n                tokens.length,\\n                amounts.length\\n            );\\n        }\\n\\n        uint256[] memory allowances = validator.allowance();\\n        uint256[] memory weights = getNormalizedWeights();\\n        uint256[] memory newWeights = new uint256[](tokens.length);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (amounts[i] > holdings[i] || amounts[i] > allowances[i]) {\\n                revert Mammon__AmountExceedAvailable(\\n                    address(tokens[i]),\\n                    amounts[i],\\n                    holdings[i].min(allowances[i])\\n                );\\n            }\\n        }\\n\\n        uint256[] memory managed = new uint256[](tokens.length);\\n\\n        /// Decrease cash balance and increase managed balance of pool\\n        /// i.e. Move amounts from cash balance to managed balance\\n        updatePoolBalance(amounts, IBVault.PoolBalanceOpKind.WITHDRAW);\\n        /// Set managed balance of pool as zero array\\n        /// i.e. Withdraw amounts of tokens from pool to Mammon Vault\\n        updatePoolBalance(managed, IBVault.PoolBalanceOpKind.UPDATE);\\n\\n        uint256[] memory withdrawnAmounts = new uint256[](amounts.length);\\n        uint256 weightSum;\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] > 0) {\\n                withdrawnAmounts[i] = withdrawToken(tokens[i]);\\n\\n                uint256 newBalance = holdings[i] - amounts[i];\\n                newWeights[i] = (weights[i] * newBalance) / holdings[i];\\n            } else {\\n                newWeights[i] = weights[i];\\n            }\\n\\n            weightSum += newWeights[i];\\n        }\\n\\n        updateWeights(newWeights, weightSum);\\n\\n        emit Withdraw(\\n            amounts,\\n            withdrawnAmounts,\\n            allowances,\\n            getNormalizedWeights()\\n        );\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function initializeFinalization()\\n        external\\n        override\\n        onlyOwner\\n        onlyInitialized\\n        nonFinalizing\\n    {\\n        noticeTimeoutAt = block.timestamp.toUint64() + noticePeriod;\\n        emit FinalizationInitialized(noticeTimeoutAt);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function finalize() external override nonReentrant onlyOwnerOrManager {\\n        if (noticeTimeoutAt == 0) {\\n            revert Mammon__FinalizationNotInitialized();\\n        }\\n        if (noticeTimeoutAt > block.timestamp) {\\n            revert Mammon__NoticeTimeoutNotElapsed(noticeTimeoutAt);\\n        }\\n\\n        uint256[] memory amounts = returnFunds();\\n        emit Finalized(msg.sender, amounts);\\n\\n        selfdestruct(payable(owner()));\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function setManager(address newManager) external override onlyOwner {\\n        if (newManager == address(0)) {\\n            revert Mammon__ManagerIsZeroAddress();\\n        }\\n        emit ManagerChanged(manager, newManager);\\n        manager = newManager;\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function sweep(address token, uint256 amount) external override onlyOwner {\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /// MANAGER API ///\\n\\n    /// @inheritdoc IManagerAPI\\n    function updateWeightsGradually(\\n        uint256[] calldata targetWeights,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external override onlyManager onlyInitialized nonFinalizing {\\n        if (endTime - startTime < MINIMUM_WEIGHT_CHANGE_DURATION) {\\n            revert Mammon__WeightChangeDurationIsBelowMin(\\n                endTime - startTime,\\n                MINIMUM_WEIGHT_CHANGE_DURATION\\n            );\\n        }\\n\\n        pool.updateWeightsGradually(startTime, endTime, targetWeights);\\n\\n        emit UpdateWeightsGradually(startTime, endTime, targetWeights);\\n    }\\n\\n    /// @inheritdoc IManagerAPI\\n    function setSwapEnabled(bool value)\\n        external\\n        override\\n        onlyManager\\n        onlyInitialized\\n    {\\n        pool.setSwapEnabled(value);\\n        emit SetSwapEnabled(value);\\n    }\\n\\n    /// @inheritdoc IManagerAPI\\n    function setSwapFee(uint256 newSwapFee) external override onlyManager {\\n        pool.setSwapFeePercentage(newSwapFee);\\n        emit SetSwapFee(newSwapFee);\\n    }\\n\\n    /// MULTI ASSET VAULT INTERFACE ///\\n\\n    /// @inheritdoc IMultiAssetVault\\n    function holding(uint256 index) public view override returns (uint256) {\\n        uint256[] memory amounts = getHoldings();\\n        return amounts[index];\\n    }\\n\\n    /// @inheritdoc IMultiAssetVault\\n    function getHoldings()\\n        public\\n        view\\n        override\\n        returns (uint256[] memory amounts)\\n    {\\n        (, amounts, ) = getTokensData();\\n    }\\n\\n    /// USER API ///\\n\\n    /// @inheritdoc IUserAPI\\n    function isSwapEnabled() external view override returns (bool) {\\n        return pool.getSwapEnabled();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getSwapFee() external view override returns (uint256) {\\n        return pool.getSwapFeePercentage();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getPoolId() public view override returns (bytes32) {\\n        return pool.getPoolId();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getTokensData()\\n        public\\n        view\\n        override\\n        returns (\\n            IERC20[] memory,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        return bVault.getPoolTokens(getPoolId());\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getTokens()\\n        public\\n        view\\n        override\\n        returns (IERC20[] memory tokens)\\n    {\\n        (tokens, , ) = getTokensData();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getNormalizedWeights()\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return pool.getNormalizedWeights();\\n    }\\n\\n    /// INTERNAL FUNCTIONS ///\\n    /// @dev PoolBalanceOpKind has three kinds\\n    /// Withdrawal - decrease the Pool's cash, but increase its managed balance,\\n    ///              leaving the total balance unchanged.\\n    /// Deposit - increase the Pool's cash, but decrease its managed balance,\\n    ///           leaving the total balance unchanged.\\n    /// Update - don't affect the Pool's cash balance, but change the managed balance,\\n    ///          so it does alter the total. The external amount can be either\\n    ///          increased or decreased by this call (i.e., reporting a gain or a loss).\\n    function updatePoolBalance(\\n        uint256[] memory amounts,\\n        IBVault.PoolBalanceOpKind kind\\n    ) internal {\\n        IBVault.PoolBalanceOp[] memory ops = new IBVault.PoolBalanceOp[](\\n            amounts.length\\n        );\\n        bytes32 poolId = getPoolId();\\n        IERC20[] memory tokens = getTokens();\\n\\n        for (uint256 i = 0; i < ops.length; i++) {\\n            ops[i].kind = kind;\\n            ops[i].poolId = poolId;\\n            ops[i].token = tokens[i];\\n            ops[i].amount = amounts[i];\\n        }\\n\\n        bVault.managePoolBalance(ops);\\n    }\\n\\n    /// @notice Update weights of tokens in the pool.\\n    /// @dev Will only be called by deposit() and withdraw().\\n    function updateWeights(uint256[] memory weights, uint256 weightSum)\\n        internal\\n    {\\n        uint256[] memory newWeights = new uint256[](weights.length);\\n\\n        uint256 adjustedSum;\\n        for (uint256 i = 0; i < weights.length; i++) {\\n            newWeights[i] = (weights[i] * ONE) / weightSum;\\n            adjustedSum += newWeights[i];\\n        }\\n\\n        newWeights[0] = newWeights[0] + ONE - adjustedSum;\\n\\n        uint256 timestamp = block.timestamp;\\n        pool.updateWeightsGradually(timestamp, timestamp, newWeights);\\n    }\\n\\n    /// @notice Deposit token to the pool.\\n    /// @dev Will only be called by deposit().\\n    /// @param token Address of the token to deposit.\\n    /// @param amount Amount to deposit.\\n    function depositToken(IERC20 token, uint256 amount) internal {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        token.safeApprove(address(bVault), amount);\\n    }\\n\\n    /// @notice Withdraw token from the pool.\\n    /// @dev Will only be called by withdraw().\\n    /// @param token Address of the token to withdraw.\\n    /// @param amount Amount to withdraw.\\n    function withdrawToken(IERC20 token) internal returns (uint256 amount) {\\n        amount = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    /// @notice Return all funds to owner.\\n    /// @dev Will only be called by finalize().\\n    /// @return amounts Exact returned amount of tokens.\\n    function returnFunds() internal returns (uint256[] memory amounts) {\\n        uint256[] memory holdings = getHoldings();\\n\\n        IERC20[] memory tokens = getTokens();\\n        uint256[] memory managed = new uint256[](tokens.length);\\n\\n        updatePoolBalance(holdings, IBVault.PoolBalanceOpKind.WITHDRAW);\\n        updatePoolBalance(managed, IBVault.PoolBalanceOpKind.UPDATE);\\n\\n        amounts = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            amounts[i] = withdrawToken(tokens[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fc0098984446ed8027fd317a76d84da24f0005d19fdad892f33c0f53a77c48e\",\"license\":\"UNLICENSED\"},\"contracts/dependencies/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0x58babacb64eab01969e87b3678d8f58165bc6a4d56d0eea570ba87c3b1b14583\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0x6e77518fa23344571e92f538413dd2f3e08bf80ed4b53f33983256a88d9044fb\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc9798f4a9c08aa45233d47fa103d1d6ba7c74edcf5a9900c209fe417aef11985\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x2c2bab9a5dc8a3f6cbf0a45e9413a9bde9b9af438722038ecf3b5450683eda7c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\",\"keccak256\":\"0x67299250ad33d9653ba6e0589b60a2bcca5bd9eafaf8958fd3de79116e6f6754\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5a84941e8ac9bf14e8645a519242a62af5da41357582141ca80f55fb04d49ea8\",\"license\":\"MIT\"},\"contracts/interfaces/IBManagedPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\n\\ninterface IBManagedPool {\\n    function updateWeightsGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] memory endWeights\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 swapFeePercentage) external;\\n\\n    function setSwapEnabled(bool swapEnabled) external;\\n\\n    function getSwapEnabled() external view returns (bool);\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2d64b9ba18aaf255ea3a1c89a8de7cd5b1451aa00755d318e714a9557754fa95\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\n\\ninterface IBVault {\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IERC20[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IERC20[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    enum PoolBalanceChangeKind {\\n        JOIN,\\n        EXIT\\n    }\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IERC20 assetIn;\\n        IERC20 assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IERC20[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    enum PoolBalanceOpKind {\\n        WITHDRAW,\\n        DEPOSIT,\\n        UPDATE\\n    }\\n\\n    function setPaused(bool paused) external;\\n}\\n\",\"keccak256\":\"0x765502bb9774fc0b1a459f69d75c9eefeec7063b51692f5f0a6fa0cdeca533b3\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMammonPoolFactoryV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./IBVault.sol\\\";\\n\\ninterface IMammonPoolFactoryV1 {\\n    /// @notice Deploys a New Balancer ManagedPool.\\n    /// @param name Pool Token name.\\n    /// @param symbol Pool Token symbol.\\n    /// @param tokens Addresses of asset tokens.\\n    /// @param weights Initial weights of asset tokens.\\n    /// @param assetManagers Addresses of asset managers.\\n    /// @param swapFeePercentage Swap fee percentage.\\n    /// @param owner Pool controller.\\n    /// @param swapEnabledOnStart Swap enabled states on start.\\n    /// @param mustAllowlistLPs If true, only listed addresses can join the pool.\\n    /// @param managementSwapFeePercentage Management swap fee percentage.\\n    function create(\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256[] memory weights,\\n        address[] memory assetManagers,\\n        uint256 swapFeePercentage,\\n        address owner,\\n        bool swapEnabledOnStart,\\n        bool mustAllowlistLPs,\\n        uint256 managementSwapFeePercentage\\n    ) external returns (address);\\n\\n    /// @notice Balancer vault\\n    /// @return Balancer vault for balancer pool\\n    function getVault() external view returns (IBVault);\\n}\\n\",\"keccak256\":\"0x3bb01159dd0a6b70034e1415017224b2e93c4451b4556bd03173bc03e9a560d6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMammonVaultV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"./IUserAPI.sol\\\";\\nimport \\\"./IManagerAPI.sol\\\";\\nimport \\\"./IProtocolAPI.sol\\\";\\nimport \\\"./IMultiAssetVault.sol\\\";\\n\\n/// @title Interface for v1 vault.\\n// solhint-disable-next-line no-empty-blocks\\ninterface IMammonVaultV1 is\\n    IUserAPI,\\n    IManagerAPI,\\n    IProtocolAPI,\\n    IMultiAssetVault\\n{\\n\\n}\\n\",\"keccak256\":\"0x928b7a267fc5a6fd91b6081e246830abaf4ec1d5940dbfb27e35fe22d734583d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IManagerAPI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n/// @title Interface for vault manager.\\n/// @notice Supports parameter submission.\\ninterface IManagerAPI {\\n    /// @notice Enable or disable swap.\\n    /// @param value New state of swap.\\n    function setSwapEnabled(bool value) external;\\n\\n    /// @notice Initiate weight move to target in given update window.\\n    /// @param targetWeights Target weights of tokens.\\n    /// @param startTime Timestamp at when weight movement starts.\\n    /// @param endTime Timestamp at when the weights should reach target.\\n    function updateWeightsGradually(\\n        uint256[] memory targetWeights,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external;\\n\\n    /// @notice Change swap fee.\\n    function setSwapFee(uint256 newSwapFee) external;\\n}\\n\",\"keccak256\":\"0x9f84ab964c43b9b4d6057f06fd2cf307ec668436502b7a510f44ed5777419ae9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMultiAssetVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n/// @title Multi-asset vault interface.\\ninterface IMultiAssetVault {\\n    /// @notice Balance of the token with index\\n    /// @return Token balance in underlying pool\\n    function holding(uint256 index) external view returns (uint256);\\n\\n    /// @notice Balance of the tokens\\n    /// @return Token balances in underlying pool\\n    function getHoldings() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x4bb4aed3aea3109e8401555c66e98a3113722d829a22d7e546d043ec88cb3225\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IProtocolAPI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n/// @title Interface for protocol that owns treasury.\\ninterface IProtocolAPI {\\n    /// @notice Initialize Vault with first deposit.\\n    /// @dev Initial deposit must be performed before\\n    ///      calling withdraw() or deposit() functions.\\n    /// @param amounts Deposit amount of tokens.\\n    function initialDeposit(uint256[] memory amounts) external;\\n\\n    /// @notice Deposit tokens into vault.\\n    /// @param amounts Amount to deposit of tokens.\\n    function deposit(uint256[] memory amounts) external;\\n\\n    /// @notice Withdraw tokens up to requested amounts.\\n    /// @param amounts Requested amount of tokens.\\n    function withdraw(uint256[] memory amounts) external;\\n\\n    /// @notice Initiate vault destruction and return all funds to treasury owner.\\n    function initializeFinalization() external;\\n\\n    /// @notice Destroy vault and returns all funds to treasury owner.\\n    function finalize() external;\\n\\n    /// @notice Change manager.\\n    function setManager(address newManager) external;\\n\\n    /// @notice Withdraw any tokens accidentally sent to vault.\\n    function sweep(address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x589b430aa46bb24211beff0d5b6f9217c3170ac3c2c8f9823fd92d31c02dfbb8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUserAPI.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./IProtocolAPI.sol\\\";\\nimport \\\"./IMultiAssetVault.sol\\\";\\n\\n/// @title Vault public interface.\\n/// @notice Interface for vault arbitrageurs and other observers.\\ninterface IUserAPI {\\n    /// @notice Check if vault trading is enabled.\\n    /// @return If public swap is turned on, returns true, otherwise false.\\n    function isSwapEnabled() external view returns (bool);\\n\\n    /// @notice Get swap fee.\\n    /// @return Swap fee from underlying Balancer pool.\\n    function getSwapFee() external view returns (uint256);\\n\\n    /// @notice Get Pool ID.\\n    /// @return Pool ID of Balancer pool on Vault.\\n    function getPoolId() external view returns (bytes32);\\n\\n    /// @notice Get Token Data of Balancer Pool.\\n    /// @return tokens IERC20 tokens of Balancer pool.\\n    /// @return balances Balances of tokens of Balancer pool.\\n    /// @return lastChangeBlock Last updated Blocknumber.\\n    function getTokensData()\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /// @notice Get IERC20 Tokens Balancer Pool.\\n    /// @return tokens IERC20 tokens of Balancer pool.\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    /// @notice Get token weights.\\n    /// @return Normalized weights of tokens on Balancer pool.\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x0ff2a173c551960e8ce8f93663753a5f34189a9aa184be9757cbb68f2ecab3de\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IWithdrawalValidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.11;\\n\\n/// @title Withdrawal validation logic.\\n/// @notice Represents the withdrawal conditions for a vault.\\n/// @dev Should be extended by vault owner or manager, deployed and attached\\n///      to a vault instance. Withdrawal validator needs to respond to shortfall\\n///      shortfall conditions and provide an accurate allowance.\\ninterface IWithdrawalValidator {\\n    /// @notice Determine how much of each token could be withdrawn under\\n    ///         current conditions.\\n    /// @return token0Amount, token1Amount The quantity of each token that\\n    ///         can be withdrawn from the vault.\\n    /// @dev Token quantity value should be interpreted with the same\\n    ///      decimals as the token ERC20 balance.\\n    function allowance() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xf916f606bf07b8c6690d57c8b9fdfffbd1a3b9d2c27e7adbd1131e58c9b6e826\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063598b8e7111610104578063aa6ca808116100a2578063d4cadf6811610071578063d4cadf6814610448578063e01af92c14610450578063f2fde38b14610463578063f89f27ed1461047657600080fd5b8063aa6ca808146103f8578063bae930cb1461040d578063d0ebdbe714610420578063d353ac7c1461043357600080fd5b80637284e416116100de5780637284e416146103835780638da5cb5b14610398578063983d95ce146103a95780639b14d4c6146103bc57600080fd5b8063598b8e71146103555780636ea056a914610368578063715018a61461037b57600080fd5b8063351a964d116101715780633a5381b51161014b5780633a5381b5146102df5780634771233b14610306578063481c6a751461033a5780634bb278f31461034d57600080fd5b8063351a964d1461029a57806338fff2d0146102a2578063394b71cf146102b857600080fd5b806316f0115b116101ad57806316f0115b1461022d578063246bc19b1461026c57806324d9ce4b1461027f57806334e199071461028757600080fd5b806308860ee5146101d457806309402ebd146101e9578063158ef93e14610209575b600080fd5b6101e76101e23660046129d1565b61047e565b005b6101f16106fd565b60405161020093929190612a87565b60405180910390f35b60035461021d90600160e01b900460ff1681565b6040519015158152602001610200565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610200565b6101e761027a366004612abd565b6107a7565b6101e7610935565b6101e7610295366004612b0e565b610a9f565b61021d610b80565b6102aa610c09565b604051908152602001610200565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b60035461032190600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610200565b600354610254906001600160a01b031681565b6101e7610c8d565b6101e76103633660046129d1565b610e00565b6101e7610376366004612b3c565b6111f5565b6101e7611267565b61038b6112cd565b6040516102009190612bc0565b6000546001600160a01b0316610254565b6101e76103b73660046129d1565b61135b565b6103e37f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610200565b610400611987565b6040516102009190612bd3565b6102aa61041b366004612b0e565b611999565b6101e761042e366004612be6565b6119c8565b61043b611ab2565b6040516102009190612c03565b6102aa611ac3565b6101e761045e366004612c24565b611b23565b6101e7610471366004612be6565b611c26565b61043b611d08565b6000546001600160a01b031633146104dd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600354600160e01b900460ff161561050857604051631ec6430360e31b815260040160405180910390fd5b600380547fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b1790556000610540611987565b8051909150821461057157805160405163d818ce8360e01b81526004810191909152602481018390526044016104d4565b600080848460405160200161058893929190612c90565b604051602081830303815290604052905060005b82518110156106135760008585838181106105b9576105b9612cb6565b905060200201351115610601576106018382815181106105db576105db612cb6565b60200260200101518686848181106105f5576105f5612cb6565b90506020020135611db5565b8061060b81612ce2565b91505061059c565b506000604051806080016040528084815260200186868080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509385525050506020820185905260409091015290506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b95cac286106a2610c09565b3030856040518563ffffffff1660e01b81526004016106c49493929190612cfd565b600060405180830381600087803b1580156106de57600080fd5b505af11580156106f2573d6000803e3d6000fd5b505050505050505050565b60608060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d4668610739610c09565b6040518263ffffffff1660e01b815260040161075791815260200190565b600060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261079c9190810190612e9c565b925092509250909192565b6003546001600160a01b031633146107d257604051634dd4ed5360e01b815260040160405180910390fd5b600354600160e01b900460ff166107fc57604051631888b48f60e31b815260040160405180910390fd5b600354600160a01b900467ffffffffffffffff161561082e576040516395ebdb5f60e01b815260040160405180910390fd5b600161083a8383612f6a565b101561086e5761084a8282612f6a565b604051632f395f7560e01b81526004810191909152600160248201526044016104d4565b604051633e56920560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633e569205906108c0908590859089908990600401612f81565b600060405180830381600087803b1580156108da57600080fd5b505af11580156108ee573d6000803e3d6000fd5b505050507f10d2cebdbfcb912ca22f107e18eadc260a534609e13140deac4568a732171826828286866040516109279493929190612f81565b60405180910390a150505050565b6000546001600160a01b0316331461098f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b600354600160e01b900460ff166109b957604051631888b48f60e31b815260040160405180910390fd5b600354600160a01b900467ffffffffffffffff16156109eb576040516395ebdb5f60e01b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16610a1b42611dfe565b610a259190612fa1565b600380547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff93841681029190911791829055604051910490911681527f33e822f2bda8444368b3567e3bdbb01de7d80f64a774c929d9f2e7e9b281adc39060200160405180910390a1565b6003546001600160a01b03163314610aca57604051634dd4ed5360e01b815260040160405180910390fd5b604051631c74c91760e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338e9922e90602401600060405180830381600087803b158015610b2c57600080fd5b505af1158015610b40573d6000803e3d6000fd5b505050507fcda74150def0ede554aff5f677be9df0e226fddff9bd9ceddf732b9673b1c92d81604051610b7591815260200190565b60405180910390a150565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166347bc4d926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612fcd565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338fff2d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612fea565b60026001541415610ce05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104d4565b60026001556000546001600160a01b03163314801590610d0b57506003546001600160a01b03163314155b15610d2957604051637849279f60e01b815260040160405180910390fd5b600354600160a01b900467ffffffffffffffff16610d5a57604051630ce728a360e21b815260040160405180910390fd5b60035442600160a01b90910467ffffffffffffffff161115610da55760035460405163074cec0760e01b8152600160a01b90910467ffffffffffffffff1660048201526024016104d4565b6000610daf611e82565b9050336001600160a01b03167fdc2a54875b2c12c509c49d8497fade5643d0547ce751bae768b9e9ae8c64748082604051610dea9190612c03565b60405180910390a26000546001600160a01b0316ff5b60026001541415610e535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104d4565b60026001556000546001600160a01b03163314610eb25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b600354600160e01b900460ff16610edc57604051631888b48f60e31b815260040160405180910390fd5b600354600160a01b900467ffffffffffffffff1615610f0e576040516395ebdb5f60e01b815260040160405180910390fd5b606080610f196106fd565b50815191935091508314610f4d57815160405163d818ce8360e01b81526004810191909152602481018490526044016104d4565b6000610f57611d08565b90506000835167ffffffffffffffff811115610f7557610f75612dd1565b604051908082528060200260200182016040528015610f9e578160200160208202803683370190505b5090506000805b8681101561111d576000888883818110610fc157610fc1612cb6565b9050602002013511156110ab57610ffd868281518110610fe357610fe3612cb6565b60200260200101518989848181106105f5576105f5612cb6565b600088888381811061101157611011612cb6565b9050602002013586838151811061102a5761102a612cb6565b602002602001015161103c9190613003565b905085828151811061105057611050612cb6565b60200260200101518186848151811061106b5761106b612cb6565b602002602001015161107d919061301b565b611087919061303a565b84838151811061109957611099612cb6565b602002602001018181525050506110e4565b8381815181106110bd576110bd612cb6565b60200260200101518382815181106110d7576110d7612cb6565b6020026020010181815250505b8281815181106110f6576110f6612cb6565b6020026020010151826111099190613003565b91508061111581612ce2565b915050610fa5565b5061115d87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525060029250611f97915050565b61119c87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525060019250611f97915050565b6111a68282612180565b7fb673307357ce73f37debd138bc7e0def885c66e3655139e701362d43243bb9a087876111d1611d08565b6040516111e09392919061305c565b60405180910390a15050600180555050505050565b6000546001600160a01b0316331461124f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b6112636001600160a01b038316338361230e565b5050565b6000546001600160a01b031633146112c15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b6112cb600061238b565b565b600280546112da90613082565b80601f016020809104026020016040519081016040528092919081815260200182805461130690613082565b80156113535780601f1061132857610100808354040283529160200191611353565b820191906000526020600020905b81548152906001019060200180831161133657829003601f168201915b505050505081565b600260015414156113ae5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104d4565b60026001556000546001600160a01b0316331461140d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b600354600160e01b900460ff1661143757604051631888b48f60e31b815260040160405180910390fd5b600354600160a01b900467ffffffffffffffff1615611469576040516395ebdb5f60e01b815260040160405180910390fd5b6060806114746106fd565b508151919350915083146114a857815160405163d818ce8360e01b81526004810191909152602481018490526044016104d4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de242ff46040518163ffffffff1660e01b8152600401600060405180830381865afa158015611508573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261153091908101906130bd565b9050600061153c611d08565b90506000845167ffffffffffffffff81111561155a5761155a612dd1565b604051908082528060200260200182016040528015611583578160200160208202803683370190505b50905060005b85518110156116c2578481815181106115a4576115a4612cb6565b60200260200101518888838181106115be576115be612cb6565b90506020020135118061160157508381815181106115de576115de612cb6565b60200260200101518888838181106115f8576115f8612cb6565b90506020020135115b156116b05785818151811061161857611618612cb6565b602002602001015188888381811061163257611632612cb6565b9050602002013561167e86848151811061164e5761164e612cb6565b602002602001015188858151811061166857611668612cb6565b60200260200101516123e890919063ffffffff16565b60405163105cd7d760e01b81526001600160a01b039093166004840152602483019190915260448201526064016104d4565b806116ba81612ce2565b915050611589565b506000855167ffffffffffffffff8111156116df576116df612dd1565b604051908082528060200260200182016040528015611708578160200160208202803683370190505b50905061174788888080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509250611f97915050565b611752816002611f97565b60008767ffffffffffffffff81111561176d5761176d612dd1565b604051908082528060200260200182016040528015611796578160200160208202803683370190505b5090506000805b898110156119265760008b8b838181106117b9576117b9612cb6565b9050602002013511156118b4576117e88982815181106117db576117db612cb6565b60200260200101516123fe565b8382815181106117fa576117fa612cb6565b60200260200101818152505060008b8b8381811061181a5761181a612cb6565b9050602002013589838151811061183357611833612cb6565b60200260200101516118459190612f6a565b905088828151811061185957611859612cb6565b60200260200101518188848151811061187457611874612cb6565b6020026020010151611886919061301b565b611890919061303a565b8683815181106118a2576118a2612cb6565b602002602001018181525050506118ed565b8581815181106118c6576118c6612cb6565b60200260200101518582815181106118e0576118e0612cb6565b6020026020010181815250505b8481815181106118ff576118ff612cb6565b6020026020010151826119129190613003565b91508061191e81612ce2565b91505061179d565b506119318482612180565b7f19b6b36dbef13cbe025e192eee2e5528d4a90ac8ce2b7519c5f527ea9803ee5e8a8a848961195e611d08565b60405161196f9594939291906130fa565b60405180910390a15050600180555050505050505050565b60606119916106fd565b509092915050565b6000806119a4611ab2565b90508083815181106119b8576119b8612cb6565b6020026020010151915050919050565b6000546001600160a01b03163314611a225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b6001600160a01b038116611a4957604051633ce7a14160e11b815260040160405180910390fd5b6003546040516001600160a01b038084169216907f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435090600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6060611abc6106fd565b5092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166355c676286040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c69573d6000803e3d6000fd5b6003546001600160a01b03163314611b4e57604051634dd4ed5360e01b815260040160405180910390fd5b600354600160e01b900460ff16611b7857604051631888b48f60e31b815260040160405180910390fd5b604051633806be4b60e21b815281151560048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e01af92c90602401600060405180830381600087803b158015611bdb57600080fd5b505af1158015611bef573d6000803e3d6000fd5b505050507f8bcc108c7d867d0a70433f71ecba3056c4dcc48eaabe4ca987f9fb1f836091d581604051610b75911515815260200190565b6000546001600160a01b03163314611c805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b6001600160a01b038116611cfc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104d4565b611d058161238b565b50565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f89f27ed6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611d68573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c0491908101906130bd565b6000611d9b83612484565b8015611dac5750611dac83836124b7565b90505b92915050565b611dca6001600160a01b0383163330846125b5565b6112636001600160a01b0383167f0000000000000000000000000000000000000000000000000000000000000000836125f3565b600067ffffffffffffffff821115611e7e5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016104d4565b5090565b60606000611e8e611ab2565b90506000611e9a611987565b90506000815167ffffffffffffffff811115611eb857611eb8612dd1565b604051908082528060200260200182016040528015611ee1578160200160208202803683370190505b509050611eef836000611f97565b611efa816002611f97565b815167ffffffffffffffff811115611f1457611f14612dd1565b604051908082528060200260200182016040528015611f3d578160200160208202803683370190505b50935060005b8251811015611f9057611f618382815181106117db576117db612cb6565b858281518110611f7357611f73612cb6565b602090810291909101015280611f8881612ce2565b915050611f43565b5050505090565b6000825167ffffffffffffffff811115611fb357611fb3612dd1565b60405190808252806020026020018201604052801561200557816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181611fd15790505b5090506000612012610c09565b9050600061201e611987565b905060005b8351811015612133578484828151811061203f5761203f612cb6565b602002602001015160000190600281111561205c5761205c613154565b9081600281111561206f5761206f613154565b815250508284828151811061208657612086612cb6565b602002602001015160200181815250508181815181106120a8576120a8612cb6565b60200260200101518482815181106120c2576120c2612cb6565b6020026020010151604001906001600160a01b031690816001600160a01b0316815250508581815181106120f8576120f8612cb6565b602002602001015184828151811061211257612112612cb6565b6020908102919091010151606001528061212b81612ce2565b915050612023565b50604051637362304960e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6c46092906106c490869060040161316a565b6000825167ffffffffffffffff81111561219c5761219c612dd1565b6040519080825280602002602001820160405280156121c5578160200160208202803683370190505b5090506000805b84518110156122645783670de0b6b3a76400008683815181106121f1576121f1612cb6565b6020026020010151612203919061301b565b61220d919061303a565b83828151811061221f5761221f612cb6565b60200260200101818152505082818151811061223d5761223d612cb6565b6020026020010151826122509190613003565b91508061225c81612ce2565b9150506121cc565b5080670de0b6b3a76400008360008151811061228257612282612cb6565b60200260200101516122949190613003565b61229e9190612f6a565b826000815181106122b1576122b1612cb6565b6020908102919091010152604051633e56920560e01b815242906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633e569205906106c4908490819088906004016131f5565b6040516001600160a01b03831660248201526044810182905261238690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915261270f565b505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008183106123f75781611dac565b5090919050565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124699190612fea565b905061247f6001600160a01b038316338361230e565b919050565b6000612497826301ffc9a760e01b6124b7565b8015611daf57506124b0826001600160e01b03196124b7565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612533908690613214565b6000604051808303818686fa925050503d806000811461256f576040519150601f19603f3d011682016040523d82523d6000602084013e612574565b606091505b509150915060208151101561258f5760009350505050611daf565b8180156125ab5750808060200190518101906125ab9190612fcd565b9695505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526125ed9085906323b872dd60e01b9060840161233a565b50505050565b80158061266d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266b9190612fea565b155b6126df5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016104d4565b6040516001600160a01b03831660248201526044810182905261238690849063095ea7b360e01b9060640161233a565b6000612764826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127f49092919063ffffffff16565b80519091501561238657808060200190518101906127829190612fcd565b6123865760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104d4565b6060612803848460008561280d565b90505b9392505050565b6060824710156128855760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104d4565b843b6128d35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104d4565b600080866001600160a01b031685876040516128ef9190613214565b60006040518083038185875af1925050503d806000811461292c576040519150601f19603f3d011682016040523d82523d6000602084013e612931565b606091505b509150915061294182828661294c565b979650505050505050565b6060831561295b575081612806565b82511561296b5782518084602001fd5b8160405162461bcd60e51b81526004016104d49190612bc0565b60008083601f84011261299757600080fd5b50813567ffffffffffffffff8111156129af57600080fd5b6020830191508360208260051b85010111156129ca57600080fd5b9250929050565b600080602083850312156129e457600080fd5b823567ffffffffffffffff8111156129fb57600080fd5b612a0785828601612985565b90969095509350505050565b600081518084526020808501945080840160005b83811015612a4c5781516001600160a01b031687529582019590820190600101612a27565b509495945050505050565b600081518084526020808501945080840160005b83811015612a4c57815187529582019590820190600101612a6b565b606081526000612a9a6060830186612a13565b8281036020840152612aac8186612a57565b915050826040830152949350505050565b60008060008060608587031215612ad357600080fd5b843567ffffffffffffffff811115612aea57600080fd5b612af687828801612985565b90989097506020870135966040013595509350505050565b600060208284031215612b2057600080fd5b5035919050565b6001600160a01b0381168114611d0557600080fd5b60008060408385031215612b4f57600080fd5b8235612b5a81612b27565b946020939093013593505050565b60005b83811015612b83578181015183820152602001612b6b565b838111156125ed5750506000910152565b60008151808452612bac816020860160208601612b68565b601f01601f19169290920160200192915050565b602081526000611dac6020830184612b94565b602081526000611dac6020830184612a13565b600060208284031215612bf857600080fd5b813561280681612b27565b602081526000611dac6020830184612a57565b8015158114611d0557600080fd5b600060208284031215612c3657600080fd5b813561280681612c16565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612c7357600080fd5b8260051b8083602087013760009401602001938452509192915050565b60ff84168152604060208201526000612cad604083018486612c41565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612cf657612cf6612ccc565b5060010190565b848152600060206001600160a01b03808716828501528086166040850152506080606084015261010083018451608080860152818151808452610120870191508483019350600092505b80831015612d725783516001600160a01b031682526020820191508484019350600183019250612d47565b50838701519350607f199250828682030160a0870152612d928185612a57565b935050506040850151818584030160c0860152612daf8382612b94565b925050506060840151612dc660e085018215159052565b509695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e1057612e10612dd1565b604052919050565b600067ffffffffffffffff821115612e3257612e32612dd1565b5060051b60200190565b600082601f830112612e4d57600080fd5b81516020612e62612e5d83612e18565b612de7565b82815260059290921b84018101918181019086841115612e8157600080fd5b8286015b84811015612dc65780518352918301918301612e85565b600080600060608486031215612eb157600080fd5b835167ffffffffffffffff80821115612ec957600080fd5b818601915086601f830112612edd57600080fd5b81516020612eed612e5d83612e18565b82815260059290921b8401810191818101908a841115612f0c57600080fd5b948201945b83861015612f33578551612f2481612b27565b82529482019490820190612f11565b91890151919750909350505080821115612f4c57600080fd5b50612f5986828701612e3c565b925050604084015190509250925092565b600082821015612f7c57612f7c612ccc565b500390565b8481528360208201526060604082015260006125ab606083018486612c41565b600067ffffffffffffffff808316818516808303821115612fc457612fc4612ccc565b01949350505050565b600060208284031215612fdf57600080fd5b815161280681612c16565b600060208284031215612ffc57600080fd5b5051919050565b6000821982111561301657613016612ccc565b500190565b600081600019048311821515161561303557613035612ccc565b500290565b60008261305757634e487b7160e01b600052601260045260246000fd5b500490565b604081526000613070604083018587612c41565b82810360208401526125ab8185612a57565b600181811c9082168061309657607f821691505b602082108114156130b757634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156130cf57600080fd5b815167ffffffffffffffff8111156130e657600080fd5b6130f284828501612e3c565b949350505050565b60808152600061310e608083018789612c41565b82810360208401526131208187612a57565b905082810360408401526131348186612a57565b905082810360608401526131488185612a57565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b60208082528251828201819052600091906040908185019086840185805b838110156131e75782518051600381106131b057634e487b7160e01b84526021600452602484fd5b86528088015188870152868101516001600160a01b0316878701526060908101519086015260809094019391860191600101613188565b509298975050505050505050565b838152826020820152606060408201526000612cad6060830184612a57565b60008251613226818460208701612b68565b919091019291505056fea26469706673582212200a86be66281b9b9277a199106ea848498c71695e6e51a5a214c7bab26d556e6864736f6c634300080b0033",
  "devdoc": {
    "details": "Vault owner is the asset owner.",
    "events": {
      "Created(address,address[],uint256[],address,address,uint32,string)": {
        "params": {
          "description": "Vault description.",
          "factory": "Address of Balancer Managed Pool factory.",
          "manager": "Address of vault manager.",
          "noticePeriod": "Notice period in seconds.",
          "tokens": "Address of tokens.",
          "validator": "Address of withdrawal validator contract",
          "weights": "Weights of tokens."
        }
      },
      "Deposit(uint256[],uint256[])": {
        "params": {
          "amounts": "Amounts of tokens.",
          "weights": "Weights of tokens after deposit."
        }
      },
      "FinalizationInitialized(uint64)": {
        "params": {
          "noticeTimeoutAt": "Timestamp for notice timeout."
        }
      },
      "Finalized(address,uint256[])": {
        "params": {
          "amounts": "Returned amount of tokens.",
          "caller": "Address of finalizer."
        }
      },
      "ManagerChanged(address,address)": {
        "params": {
          "manager": "Address of a new manager.",
          "previousManager": "Address of previous manager."
        }
      },
      "SetSwapEnabled(bool)": {
        "params": {
          "swapEnabled": "New state of swap."
        }
      },
      "SetSwapFee(uint256)": {
        "params": {
          "swapFee": "New swap fee."
        }
      },
      "UpdateWeightsGradually(uint256,uint256,uint256[])": {
        "params": {
          "endTime": "End timestamp of updates.",
          "startTime": "Start timestamp of updates.",
          "weights": "The target weights of the tokens."
        }
      },
      "Withdraw(uint256[],uint256[],uint256[],uint256[])": {
        "params": {
          "allowances": "Allowance of tokens.",
          "requestedAmounts": "Requested amount of tokens.",
          "weights": "Weight of tokens after withdrawal.",
          "withdrawnAmounts": "Withdrawn amount of tokens."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "First token and second token shouldn't be same. Validator should conform to interface.",
        "params": {
          "description_": "Vault text description. Keep it short and simple, please.",
          "factory": "Balancer Managed Pool Factory address.",
          "manager_": "Vault manager address.",
          "name": "Name of a Pool Token.",
          "noticePeriod_": "Notice period in seconds.",
          "swapFeePercentage": "Swap fee of the pool.",
          "symbol": "Symbol of a Pool Token.",
          "tokens": "Address of tokens.",
          "validator_": "Withdrawal validator contract address."
        }
      },
      "deposit(uint256[])": {
        "params": {
          "amounts": "Amount to deposit of tokens."
        }
      },
      "getHoldings()": {
        "returns": {
          "amounts": "Token balances in underlying pool"
        }
      },
      "getNormalizedWeights()": {
        "returns": {
          "_0": "Normalized weights of tokens on Balancer pool."
        }
      },
      "getPoolId()": {
        "returns": {
          "_0": "Pool ID of Balancer pool on Vault."
        }
      },
      "getSwapFee()": {
        "returns": {
          "_0": "Swap fee from underlying Balancer pool."
        }
      },
      "getTokens()": {
        "returns": {
          "tokens": "IERC20 tokens of Balancer pool."
        }
      },
      "getTokensData()": {
        "returns": {
          "_0": "IERC20 tokens of Balancer pool.",
          "_1": "Balances of tokens of Balancer pool.",
          "_2": "Last updated Blocknumber."
        }
      },
      "holding(uint256)": {
        "returns": {
          "_0": "Token balance in underlying pool"
        }
      },
      "initialDeposit(uint256[])": {
        "details": "Initial deposit must be performed before      calling withdraw() or deposit() functions.",
        "params": {
          "amounts": "Deposit amount of tokens."
        }
      },
      "isSwapEnabled()": {
        "returns": {
          "_0": "If public swap is turned on, returns true, otherwise false."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSwapEnabled(bool)": {
        "params": {
          "value": "New state of swap."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateWeightsGradually(uint256[],uint256,uint256)": {
        "params": {
          "endTime": "Timestamp at when the weights should reach target.",
          "startTime": "Timestamp at when weight movement starts.",
          "targetWeights": "Target weights of tokens."
        }
      },
      "withdraw(uint256[])": {
        "params": {
          "amounts": "Requested amount of tokens."
        }
      }
    },
    "stateVariables": {
      "UNSET_MANAGER_ADDRESS": {
        "details": "Address to represent unset manager in events."
      },
      "description": {
        "details": "string cannot be immutable bytecode but only set in constructor"
      }
    },
    "title": "Risk-managed treasury vault.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Mammon__WeightLengthIsNotSame(uint256,uint256)": [
        {
          "notice": "ERRORS ///"
        }
      ]
    },
    "events": {
      "Created(address,address[],uint256[],address,address,uint32,string)": {
        "notice": "Emitted when the vault is created."
      },
      "Deposit(uint256[],uint256[])": {
        "notice": "Emitted when tokens are deposited."
      },
      "FinalizationInitialized(uint64)": {
        "notice": "Emitted when initializeFinalization is called."
      },
      "Finalized(address,uint256[])": {
        "notice": "Emitted when vault is finalized."
      },
      "ManagerChanged(address,address)": {
        "notice": "Emitted when manager is changed."
      },
      "SetSwapEnabled(bool)": {
        "notice": "Emitted when swap is enabled/disabled."
      },
      "SetSwapFee(uint256)": {
        "notice": "Emitted when swap fee is updated."
      },
      "UpdateWeightsGradually(uint256,uint256,uint256[])": {
        "notice": "Emitted when updateWeightsGradually is called."
      },
      "Withdraw(uint256[],uint256[],uint256[],uint256[])": {
        "notice": "Emitted when tokens are withdrawn."
      }
    },
    "kind": "user",
    "methods": {
      "bVault()": {
        "notice": "Balancer Vault. Controlled by Mammon Vault."
      },
      "constructor": {
        "notice": "Initialize the contract by deploying new Balancer pool using the provided factory."
      },
      "deposit(uint256[])": {
        "notice": "Deposit tokens into vault."
      },
      "description()": {
        "notice": "STORAGE SLOT START ///Describes vault purpose and modelling assumptions for differentiating between vaults"
      },
      "finalize()": {
        "notice": "Destroy vault and returns all funds to treasury owner."
      },
      "getHoldings()": {
        "notice": "Balance of the tokens"
      },
      "getNormalizedWeights()": {
        "notice": "Get token weights."
      },
      "getPoolId()": {
        "notice": "Get Pool ID."
      },
      "getSwapFee()": {
        "notice": "Get swap fee."
      },
      "getTokens()": {
        "notice": "Get IERC20 Tokens Balancer Pool."
      },
      "getTokensData()": {
        "notice": "Get Token Data of Balancer Pool."
      },
      "holding(uint256)": {
        "notice": "Balance of the token with index"
      },
      "initialDeposit(uint256[])": {
        "notice": "Initialize Vault with first deposit."
      },
      "initializeFinalization()": {
        "notice": "Initiate vault destruction and return all funds to treasury owner."
      },
      "initialized()": {
        "notice": "Indicates that the Vault has been initialized"
      },
      "isSwapEnabled()": {
        "notice": "Check if vault trading is enabled."
      },
      "manager()": {
        "notice": "Submits new balance parameters for the vault"
      },
      "noticePeriod()": {
        "notice": "Notice period for vault termination (in seconds)."
      },
      "noticeTimeoutAt()": {
        "notice": "Timestamp when notice elapses or 0 if not yet set"
      },
      "pool()": {
        "notice": "Balancer pool. Controlled by the Balancer vault."
      },
      "setManager(address)": {
        "notice": "Change manager."
      },
      "setSwapEnabled(bool)": {
        "notice": "Enable or disable swap."
      },
      "setSwapFee(uint256)": {
        "notice": "Change swap fee."
      },
      "sweep(address,uint256)": {
        "notice": "Withdraw any tokens accidentally sent to vault."
      },
      "updateWeightsGradually(uint256[],uint256,uint256)": {
        "notice": "Initiate weight move to target in given update window."
      },
      "validator()": {
        "notice": "Verifies withdraw limits."
      },
      "withdraw(uint256[])": {
        "notice": "Withdraw tokens up to requested amounts."
      }
    },
    "notice": "Managed n-asset vault that supports withdrawals         in line with a pre-defined validator contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4450,
        "contract": "contracts/MammonVaultV1.sol:MammonVaultV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4650,
        "contract": "contracts/MammonVaultV1.sol:MammonVaultV1",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 70,
        "contract": "contracts/MammonVaultV1.sol:MammonVaultV1",
        "label": "description",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/MammonVaultV1.sol:MammonVaultV1",
        "label": "manager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 76,
        "contract": "contracts/MammonVaultV1.sol:MammonVaultV1",
        "label": "noticeTimeoutAt",
        "offset": 20,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 79,
        "contract": "contracts/MammonVaultV1.sol:MammonVaultV1",
        "label": "initialized",
        "offset": 28,
        "slot": "3",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}